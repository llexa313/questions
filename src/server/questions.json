[
  {
    "text": "What are the advantages of using React?",
    "answer": "<div>\n    MVC is generally abbreviated as Model View Controller.\n    <br><br>\n    <ul class=\"list-text\">\n      <li>\n        <b>Use of Virtual DOM to improve efficiency</b>\n        <br>\n        React uses virtual DOM to render the view. As the name suggests, virtual DOM is a virtual representation of the real DOM. Each time the data changes in a react app, a new virtual DOM gets created. Creating a virtual DOM is much faster than rendering the UI inside the browser. Therefore, with the use of virtual DOM, the efficiency of the app improves.\n      </li>\n      <li>\n        <b>Gentle learning curve</b>\n        <br>\n        React has a gentle learning curve when compared to frameworks like Angular. Anyone with little knowledge of javascript can start building web applications using React.\n      </li>\n      <li>\n        <b>SEO friendly</b>\n        <br>\n        React allows developers to develop engaging user interfaces that can be easily navigated in various search engines. It also allows server-side rendering, which boosts the SEO of an app.\n      </li>\n      <li>\n        <b>Reusable components</b>\n        <br>\n        React uses component-based architecture for developing applications. Components are independent and reusable bits of code. These components can be shared across various applications having similar functionality. The re-use of components increases the pace of development.\n      </li>\n      <li>\n        <b>Huge ecosystem of libraries to choose from</b>\n        <br>\n        React provides you the freedom to choose the tools, libraries, and architecture for developing an application based on your requirement.\n      </li>\n    </ul>\n    <br><br>\n  </div>",
    "source": "https://www.interviewbit.com/react-interview-questions/",
    "tags": [
      "PROS"
    ]
  },
  {
    "text": "What is JSX?",
    "answer": "<div>\n    JSX stands for JavaScript XML. \n    <br>\n    It allows us to write HTML inside JavaScript and place them in the DOM without using functions like appendChild( ) or createElement( ).\n    <br>\n    As stated in the official docs of React, JSX provides syntactic sugar for React.createElement( ) function.\n    <br>\n    <b>**Note- We can create react applications without using JSX as well.</b>\n    <br>\n    Let’s understand how JSX works:\n    <br><br>\n    <b>Without using JSX,</b> we would have to create an element by the following process:\n    <br>\n    <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #008800; font-weight: bold\">const</span> text <span style=\"color: #333333\">=</span> React.createElement(<span style=\"background-color: #fff0f0\">'p'</span>, {}, <span style=\"background-color: #fff0f0\">'This is a text'</span>);\n<span style=\"color: #008800; font-weight: bold\">const</span> container <span style=\"color: #333333\">=</span> React.createElement(<span style=\"background-color: #fff0f0\">'div'</span>,<span style=\"background-color: #fff0f0\">'{}'</span>,text );\nReactDOM.render(container,rootElement);\n</pre></div>\n    <br>\n    <b>Using JSX,</b> the above code can be simplified:\n    <br>\n    <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\">const container = (\n <span style=\"color: #007700\">&lt;div&gt;</span>\n   <span style=\"color: #007700\">&lt;p&gt;</span>This is a text<span style=\"color: #007700\">&lt;/p&gt;</span>\n <span style=\"color: #007700\">&lt;/div&gt;</span>\n);\nReactDOM.render(container,rootElement);\n</pre></div>\n    <br>\n    As one can see in the code above, we are directly using HTML inside JavaScript.\n    <br><br>\n  </div>",
    "source": "https://www.interviewbit.com/react-interview-questions/",
    "tags": [
      "JSX"
    ]
  },
  {
    "text": "What are the differences between functional and class components?",
    "answer": "<div>\n    Before the introduction of Hooks in React, functional components were called stateless components and were behind class components on feature basis. After the introduction of Hooks, functional components are equivalent to class components. \n    <br>\n    Although functional components are the new trend, the react team insists on keeping class components in React. Therefore, it is important to know how these both components differ.\n    <br>\n    On the following basis let’s compare functional and class components:\n    <br><br>\n    <ul class=\"list-text\">\n      <li>\n        Decalaration\n        <br>\n        Functional components are nothing but JavaScript functions and therefore can be declared using an <b>arrow function</b> or the <b>function</b> keyword:\n        <br>\n        <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\">function card(props){\n return(\n   <span style=\"color: #007700\">&lt;div</span> <span style=\"color: #0000CC\">className=</span><span style=\"background-color: #fff0f0\">\"main-container\"</span><span style=\"color: #007700\">&gt;</span>\n     <span style=\"color: #007700\">&lt;h2&gt;</span>Title of the card<span style=\"color: #007700\">&lt;/h2&gt;</span>\n   <span style=\"color: #007700\">&lt;/div&gt;</span>\n )\n}\n\nconst card = (props) =&gt;{\n return(\n   <span style=\"color: #007700\">&lt;div</span> <span style=\"color: #0000CC\">className=</span><span style=\"background-color: #fff0f0\">\"main-container\"</span><span style=\"color: #007700\">&gt;</span>\n     <span style=\"color: #007700\">&lt;h2&gt;</span>Title of the card<span style=\"color: #007700\">&lt;/h2&gt;</span>\n   <span style=\"color: #007700\">&lt;/div&gt;</span>\n )\n}\n</pre></div>\n<br>\nClass components on the other hand, are declared using the ES6 class:\n<div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\">class Card extends React.Component{\n constructor(props){\n   super(props);\n }\n\n render(){\n   return(\n     <span style=\"color: #007700\">&lt;div</span> <span style=\"color: #0000CC\">className=</span><span style=\"background-color: #fff0f0\">\"main-container\"</span><span style=\"color: #007700\">&gt;</span>\n       <span style=\"color: #007700\">&lt;h2&gt;</span>Title of the card<span style=\"color: #007700\">&lt;/h2&gt;</span>\n     <span style=\"color: #007700\">&lt;/div&gt;</span>\n   )\n }\n}\n</pre></div>\n      </li>\n      <br><br>\n      <li>\n        Handling props\n        <br>\n        Let’s render the following component with props and analyse how functional and class components handle props:\n        <br>\n        <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #007700\">&lt;StudentInfo</span> <span style=\"color: #0000CC\">name=</span><span style=\"background-color: #fff0f0\">\"Vivek\"</span> <span style=\"color: #0000CC\">rollNumber=</span><span style=\"background-color: #fff0f0\">\"23\"</span> <span style=\"color: #007700\">/&gt;</span>\n</pre></div>\n        <br>\n        In functional components, the handling of props is pretty straight forward. Any prop provided as an argument to a functional component, can be directly used inside HTML elements:\n        <br>\n        <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\">function StudentInfo(props){\n return(\n   <span style=\"color: #007700\">&lt;div</span> <span style=\"color: #0000CC\">className=</span><span style=\"background-color: #fff0f0\">\"main\"</span><span style=\"color: #007700\">&gt;</span>\n     <span style=\"color: #007700\">&lt;h2&gt;</span>{props.name}<span style=\"color: #007700\">&lt;/h2&gt;</span>\n     <span style=\"color: #007700\">&lt;h4&gt;</span>{props.rollNumber}<span style=\"color: #007700\">&lt;/h4&gt;</span>\n   <span style=\"color: #007700\">&lt;/div&gt;</span>\n )\n}\n</pre></div>\n        <br>\n        In the case of class components, props are handled in a different way: \n        <br>\n        <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #008800; font-weight: bold\">class</span> StudentInfo <span style=\"color: #008800; font-weight: bold\">extends</span> React.Component{\n constructor(props){\n   <span style=\"color: #008800; font-weight: bold\">super</span>(props);\n }\n\n render(){\n   <span style=\"color: #008800; font-weight: bold\">return</span>(\n     <span style=\"color: #333333\">&lt;</span>div className<span style=\"color: #333333\">=</span><span style=\"background-color: #fff0f0\">\"main\"</span><span style=\"color: #333333\">&gt;</span>\n       <span style=\"color: #333333\">&lt;</span>h2<span style=\"color: #333333\">&gt;</span>{<span style=\"color: #008800; font-weight: bold\">this</span>.props.name}<span style=\"color: #333333\">&lt;/</span>h2<span style=\"color: #333333\">&gt;</span>\n       <span style=\"color: #333333\">&lt;</span>h4<span style=\"color: #333333\">&gt;</span>{<span style=\"color: #008800; font-weight: bold\">this</span>.props.rollNumber}<span style=\"color: #333333\">&lt;/</span>h4<span style=\"color: #333333\">&gt;</span> \n     <span style=\"color: #333333\">&lt;/</span>div<span style=\"color: #333333\">&gt;</span>\n   )\n }\n}\n</pre></div>\n        As we can see in the code above, <b>this</b> keyword is used in the case of class components.\n      </li>\n      <br>\n      <li>\n        Handling state\n        <br>\n        Functional components use React hooks to handle state. \n        <br>\n        It uses the <b>useState</b> hook to set state of a variable inside the component:\n        <br><br>\n        <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\">function ClassRoom(props){\n let [studentsCount,setStudentsCount] <span style=\"color: #333333\">=</span> useState(<span style=\"color: #0000DD; font-weight: bold\">0</span>);\n\n const <span style=\"color: #996633\">addStudent = </span>() <span style=\"color: #333333\">=&gt;</span> {\n   setStudentsCount(<span style=\"color: #333333\">++</span>studentsCount);\n }\n <span style=\"color: #008800; font-weight: bold\">return</span>(\n   <span style=\"color: #333333\">&lt;</span>div<span style=\"color: #333333\">&gt;</span>\n     <span style=\"color: #333333\">&lt;</span>p<span style=\"color: #333333\">&gt;</span><span style=\"color: #007020\">Number</span> <span style=\"color: #008800; font-weight: bold\">of</span> students <span style=\"color: #008800; font-weight: bold\">in</span> <span style=\"color: #008800; font-weight: bold\">class</span> <span style=\"color: #996633\">room: </span>{studentsCount}<span style=\"color: #333333\">&lt;/</span>p<span style=\"color: #333333\">&gt;</span>\n     <span style=\"color: #333333\">&lt;</span>button onClick<span style=\"color: #333333\">=</span>{addStudent}<span style=\"color: #333333\">&gt;</span>Add Student<span style=\"color: #333333\">&lt;/</span>button<span style=\"color: #333333\">&gt;</span>\n   <span style=\"color: #333333\">&lt;/</span>div<span style=\"color: #333333\">&gt;</span>\n )\n}\n</pre></div>\n        <br>\n        Since useState hook returns an array of two items, the first item contains the current state, and the second item is a function used to update the state. \n        <br>\n        In the code above, using array destructuring we have set the variable name to studentsCount with a current value of “0” and setStudentsCount is the function that is used to update the state.\n        <br>\n        For reading the state, we can see from the code above, the variable name can be directly used to read the current state of the variable.\n        <br>\n        We cannot use React Hooks inside class components, therefore state handling is done very differently in a class component:\n        <br>\n        Let’s take the same above example and convert it into a class component:\n        <br><br>\n        <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #008800; font-weight: bold\">class</span> ClassRoom <span style=\"color: #008800; font-weight: bold\">extends</span> React.Component{\n          constructor(props){\n            <span style=\"color: #008800; font-weight: bold\">super</span>(props);\n            <span style=\"color: #008800; font-weight: bold\">this</span>.<span style=\"color: #996633\">state = </span>{<span style=\"color: #996633\">studentsCount : </span><span style=\"color: #0000DD; font-weight: bold\">0</span>};\n         \n            <span style=\"color: #008800; font-weight: bold\">this</span>.<span style=\"color: #996633\">addStudent = </span><span style=\"color: #008800; font-weight: bold\">this</span>.addStudent.bind(<span style=\"color: #008800; font-weight: bold\">this</span>);\n          }\n         \n          addStudent(){\n            <span style=\"color: #008800; font-weight: bold\">this</span>.setState(<span style=\"color: #0066BB; font-weight: bold\">(prevState)=&gt;</span>{\n              <span style=\"color: #008800; font-weight: bold\">return</span> {<span style=\"color: #996633\">studentsCount: </span>prevState.studentsCount<span style=\"color: #333333\">++</span>}\n            });\n          }\n         \n          render(){\n            <span style=\"color: #008800; font-weight: bold\">return</span>(\n              <span style=\"color: #333333\">&lt;</span>div<span style=\"color: #333333\">&gt;</span>\n                <span style=\"color: #333333\">&lt;</span>p<span style=\"color: #333333\">&gt;</span><span style=\"color: #007020\">Number</span> <span style=\"color: #008800; font-weight: bold\">of</span> students <span style=\"color: #008800; font-weight: bold\">in</span> <span style=\"color: #008800; font-weight: bold\">class</span> <span style=\"color: #996633\">room: </span>{<span style=\"color: #008800; font-weight: bold\">this</span>.state.studentsCount}<span style=\"color: #333333\">&lt;/</span>p<span style=\"color: #333333\">&gt;</span>\n                <span style=\"color: #333333\">&lt;</span>button onClick<span style=\"color: #333333\">=</span>{<span style=\"color: #008800; font-weight: bold\">this</span>.addStudent}<span style=\"color: #333333\">&gt;</span>Add Student<span style=\"color: #333333\">&lt;/</span>button<span style=\"color: #333333\">&gt;</span>\n              <span style=\"color: #333333\">&lt;/</span>div<span style=\"color: #333333\">&gt;</span>\n            )\n          }\n         }\n         </pre></div>\n         \n        <br>\n        In the code above, we see we are using <b>this.state</b> to add the variable studentsCount and setting the value to “0”. \n        <br>\n        For reading the state, we are using <b>this.state.studentsCount</b>.\n        <br>\n        For updating the state, we need to first bind the addStudent function to <b>this</b>. Only then, we will be able to use the <b>setState</b> function which is used to update the state.\n      </li>\n    </ul>\n    <br><br>\n  </div>",
    "source": "https://www.interviewbit.com/react-interview-questions/",
    "tags": [
      "COMPONENTS"
    ]
  },
  {
    "text": "What are the differences between controlled and uncontrolled components?",
    "source": "https://www.interviewbit.com/react-interview-questions/",
    "answer": "<div>\n    Controlled and uncontrolled components are just different approaches to handling input form elements in react.\n    <br>\n    <table>\n      <tbody><tr>\n        <th> Feature </th>\n        <th> Uncontrolled </th>\n        <th> Controlled </th>\n        <th> Name attrs </th>\n      </tr>\n      <tr>\n        <td> One-time value retrieval (e.g. on submit) </td>\n        <td> ✔️ </td>\n        <td> ✔️ </td>\n        <td> ✔️ </td>\n      </tr>\n      <tr>\n        <td> Validating on submit </td>\n        <td> ✔️ </td>\n        <td> ✔️ </td>\n        <td> ✔️ </td>\n      </tr>\n      <tr>\n        <td> Field-level Validation </td>\n        <td> ❌ </td>\n        <td> ✔️ </td>\n        <td> ✔️ </td>\n      </tr>\n      <tr>\n        <td> Conditionally disabling submit button </td>\n        <td> ❌ </td>\n        <td> ✔️ </td>\n        <td> ✔️ </td>\n      </tr>\n      <tr>\n        <td> Enforcing input format </td>\n        <td> ❌ </td>\n        <td> ✔️ </td>\n        <td> ✔️ </td>\n      </tr>\n      <tr>\n        <td> several inputs for one piece of data </td>\n        <td> ❌ </td>\n        <td> ✔️ </td>\n        <td> ✔️ </td>\n      </tr>\n      <tr>\n        <td> dynamic inputs </td>\n        <td> ❌ </td>\n        <td> ✔️ </td>\n        <td> \uD83E\uDD14 </td>\n      </tr>\n    </tbody></table>\n    <br>\n    <b>Controlled component</b>\n    In a controlled component, the value of the input element is controlled by React. \n    <br>\n    We store the state of the input element inside the code, and by using event-based callbacks, any changes made to the input element will be reflected in the code as well. \n    <br>\n    When a user enters data inside the input element of a controlled component, onChange function gets triggered and inside the code we check whether the value entered is valid or invalid. If the value is valid, we change the state and re-render the input element with new value.\n    <br>\n    Example of a controlled component:\n    <br>\n    <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\">function FormValidation(props) {\n let [inputValue, setInputValue] = useState(\"\");\n\n let updateInput = e =&gt; {\n   setInputValue(e.target.value);\n };\n\n return (\n   <span style=\"color: #007700\">&lt;div&gt;</span>\n     <span style=\"color: #007700\">&lt;form&gt;</span>\n       <span style=\"color: #007700\">&lt;input</span> <span style=\"color: #0000CC\">type=</span><span style=\"background-color: #fff0f0\">\"text\"</span> <span style=\"color: #0000CC\">value=</span><span style=\"background-color: #fff0f0\">{inputValue}</span> <span style=\"color: #0000CC\">onChange=</span><span style=\"background-color: #fff0f0\">{updateInput}</span> <span style=\"color: #007700\">/&gt;</span>\n     <span style=\"color: #007700\">&lt;/form&gt;</span>\n   <span style=\"color: #007700\">&lt;/div&gt;</span>\n );\n}\n</pre></div>\n    <br>\n    As one can see in the code above, the value of the input element is determined by the state of the <b>inputValue</b> variable. Any changes made to the input element is handled by the <b>updateInput</b> function.\n    <br><br>\n    <b>Uncontrolled component</b>\n    In an uncontrolled component, the value of the input element is handled by the DOM itself. \n    <br>\n    Input elements inside uncontrolled components work just like normal HTML input form elements.\n    <br>\n    The state of the input element is handled by the DOM. Whenever the value of the input element is changed,event-based callbacks are not called. Basically, react does not perform any action when there are changes made to the input element.\n    <br>\n    Whenever use enters data inside the input field, the updated data is shown directly. To access the value of the input element, we can use <b>ref</b>.\n    <br>\n    Example of an uncontrolled component:\n    <br>\n    <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\">function FormValidation(props) {\n <span style=\"color: #008800; font-weight: bold\">let</span> inputValue <span style=\"color: #333333\">=</span> React.createRef();\n\n <span style=\"color: #008800; font-weight: bold\">let</span> handleSubmit <span style=\"color: #333333\">=</span> e <span style=\"color: #333333\">=&gt;</span> {\n   alert(<span style=\"background-color: #fff0f0\">`Input value: ${inputValue.current.value}`</span>);\n   e.preventDefault();\n };\n\n <span style=\"color: #008800; font-weight: bold\">return</span> (\n   <span style=\"color: #333333\">&lt;</span><span style=\"color: #007020\">div</span><span style=\"color: #333333\">&gt;</span>\n     <span style=\"color: #333333\">&lt;</span><span style=\"color: #007020\">form</span> onSubmit<span style=\"color: #333333\">=</span>{handleSubmit}<span style=\"color: #333333\">&gt;</span>\n       <span style=\"color: #333333\">&lt;</span><span style=\"color: #007020\">input</span> <span style=\"color: #008800; font-weight: bold\">type</span><span style=\"color: #333333\">=</span><span style=\"background-color: #fff0f0\">\"text\"</span> ref<span style=\"color: #333333\">=</span>{inputValue} <span style=\"color: #333333\">/&gt;</span>\n       <span style=\"color: #333333\">&lt;</span>button <span style=\"color: #008800; font-weight: bold\">type</span><span style=\"color: #333333\">=</span><span style=\"background-color: #fff0f0\">\"submit\"</span><span style=\"color: #333333\">&gt;</span>Submit<span style=\"color: #333333\">&lt;/</span>button<span style=\"color: #333333\">&gt;</span>\n     <span style=\"color: #333333\">&lt;/</span><span style=\"color: #007020\">form</span><span style=\"color: #333333\">&gt;</span>\n   <span style=\"color: #333333\">&lt;/</span><span style=\"color: #007020\">div</span><span style=\"color: #333333\">&gt;</span>\n );\n}\n</pre></div>\n    <br>\n    As one can see in the code above, we are <b>not</b> using <b>onChange</b> function to govern the changes made to the input element. Instead, we are using <b>ref</b> to access the value of the input element. \n    <br><br>\n  </div>",
    "tags": [
      "COMPONENTS"
    ]
  },
  {
    "text": "What is the virtual DOM? How does react use the virtual DOM to render the UI?",
    "source": "https://www.interviewbit.com/react-interview-questions/",
    "answer": "<div>\n    As stated by the react team, virtual DOM is a concept where a virtual representation of the real DOM is kept inside the memory and is synced with the real DOM by a library such as ReactDOM.\n    <br><br>\n    <center><img src=\"https://assets.interviewbit.com/assets/skill_interview_questions/react/Document-object-model-0c5cea2ac457bacf352a9343aea3de56f5f7ba98ee579b7a381b7e2582fd92ff.png.gz\" width=\"900px;\"></center>\n    <br>\n    <b>Why was virtual DOM introduced?</b>\n    DOM manipulation is an integral part of any web application, but DOM manipulation is quite slow when compared to other operations in JavaScript. \n    <br>\n    The efficiency of the application gets affected when several DOM manipulations are being done. Most JavaScript frameworks update the entire DOM even when a small part of the DOM changes. \n    <br>\n    For example, consider a list that is being rendered inside the DOM. If one of the items in the list changes, the entire list gets rendered again instead of just rendering the item that was changed/updated. This is called inefficient updating. \n    <br>\n    To address the problem of inefficient updating, the react team introduced the concept of virtual DOM.\n    <br><br>\n    <b>How does it work?</b>\n    <br><br>\n    <center><img src=\"https://assets.interviewbit.com/assets/skill_interview_questions/react/real-virtual-dom-ef615afd3c603140a15cc509f6b107db83aeb5d8ac27add7bd416558fa40fdd7.png.gz\" width=\"900px;\"></center>\n    <br>\n    For every DOM object, there is a corresponding virtual DOM object(copy), which has the same properties.\n    <br>\n    The main difference between the real DOM object and the virtual DOM object is that any changes in the virtual DOM object will not reflect on the screen directly. Consider a virtual DOM object as a blueprint of the real DOM object.\n    <br>\n    Whenever a JSX element gets rendered, every virtual DOM object gets updated. \n    <br><br>\n    <b>**Note-  One may think updating every virtual DOM object might be inefficient, but that’s not the case. Updating the virtual DOM is much faster than updating the real DOM since we are just updating the blueprint of the real DOM.</b>\n    <br><br>\n    React uses two virtual DOMs to render the user interface. One of them is used to store the current state of the objects and the other to store the previous state of the objects.\n    <br>\n    Whenever the virtual DOM gets updated, react compares the two virtual DOMs and gets to know about which virtual DOM objects were updated. \n    <br>\n    After knowing which objects were updated, react renders only those objects inside the real DOM  instead of rendering the complete real DOM.\n    <br>\n    This way, with the use of virtual DOM, react solves the problem of inefficient updating.\n    <br><br>\n  </div>",
    "tags": [
      "VIRTUAL DOM"
    ]
  },
  {
    "text": "What are the different lifecycle methods in React",
    "source": "https://www.interviewbit.com/react-interview-questions/",
    "answer": "<div>\n    Every component in React has lifecycle methods that we can tap into, to trigger changes at a particular phase of the life cycle. \n    <br>\n    Each component in react goes through three phases: <b>Mounting</b>, <b>Updating</b>, and <b>Unmounting</b>.\n    <br>\n    There are corresponding lifecycle methods for each of the three phases:\n    <br><br>\n    <b>**Note- In this article, we are discussing the use of lifecycle methods in class components. For utilising lifecycle methods in functional components, react hooks are used.</b>\n    <br><br>\n    <center><img src=\"https://assets.interviewbit.com/assets/skill_interview_questions/react/updating-036b153634a8a252d422f4b405055b5e929d14f67aa568189aa517c93fe23532.png.gz\" width=\"900px;\"></center>\n    <br><br>\n    <h4>Mounting:</h4>\n    <br>\n    There are four built-in lifecycle methods that are called in the <b>following order</b> when a component is mounted: \n    <br>\n    <b>constructor( )</b> - This is called before anything else. We can set the initial state of the component inside this method. The constructor method is used to set the initial state and bind methods to the component. \n    <br>\n    <b>getDerivedStateFromProps( )</b> - This is called before rendering the elements in the DOM.\n    <br>\n    In this method, we can set the state of the component based on the props we received. This method is used very rarely.  \n    <br>\n    <b>render( )</b> - This is the only required method in the class component. This method returns the HTML elements which are going to be rendered inside the DOM.\n    <br>\n    <b>componentDidMount( )</b> - It is called right after the component is rendered inside the DOM. All the statements which require the DOM nodes can be executed in this method. Network requests from a remote end-point can also be instantiated in this method. \n    <br><br>\n    <h4>Updating:</h4>\n    <br>\n    Updates in react are caused by changes in state or props. Update leads to re-rendering of the component. The following methods are called when a component is re-rendered:\n    <br>\n    <b>getDerivedStateFromProps( )</b> - This method is called again when a component is being re-rendered.\n    <br>\n    <b>shouldComponentUpdate( )</b> - This method is called before rendering the component when new props are received. It lets React know if the component’s output is affected by the newly received props or by the state change. By default, it returns <b>true</b>.\n    <br>\n    <b>render( )</b> - To re-render the HTML inside the DOM, the render( ) method gets called again.\n    <br>\n    <b>getSnapshotBeforeUpdate( )</b> - This method is called just before the newly rendered HTML gets committed to the DOM. It stores the previous state of the component so that React has an idea of what parts of the DOM needs to be updated.\n    <br>\n    <b>componentDidUpdate( )</b> - It is called after the component gets re-rendered. This method works just like the componentDidMount( ) method, the difference is that this method does not get called on initial render. \n    <br><br>\n    <h4>Unmounting:</h4>\n    <br>\n    <b>componentWillUnmount( )</b> - This method is called just before the component gets destroyed. Any clean up statements should be executed inside this method.  \n    <br><br>\n  <div>\n\n  <h3 id=\"react-strict-mode\"> 7. Explain Strict Mode in React.</h3>\n  <div>\n    StrictMode is a tool added in the <b>version 16.3</b> of React to highlight potential problems in an application. It performs additional checks on the application.\n    <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\">function App() {\n  <span style=\"color: #008800; font-weight: bold\">return</span> (\n    <span style=\"color: #333333\">&lt;</span>React.StrictMode<span style=\"color: #333333\">&gt;</span>\n      <span style=\"color: #333333\">&lt;</span><span style=\"color: #007020\">div</span> classname<span style=\"color: #333333\">=</span><span style=\"background-color: #fff0f0\">\"App\"</span><span style=\"color: #333333\">&gt;</span>\n        <span style=\"color: #333333\">&lt;</span><span style=\"color: #008800; font-weight: bold\">Header</span><span style=\"color: #333333\">/&gt;</span>\n        <span style=\"color: #333333\">&lt;</span><span style=\"color: #007020\">div</span><span style=\"color: #333333\">&gt;</span>\n          Page <span style=\"color: #007020\">Content</span>\n        <span style=\"color: #333333\">&lt;/</span><span style=\"color: #007020\">div</span><span style=\"color: #333333\">&gt;</span>\n        <span style=\"color: #333333\">&lt;</span>Footer<span style=\"color: #333333\">/&gt;</span>\n      <span style=\"color: #333333\">&lt;/</span><span style=\"color: #007020\">div</span><span style=\"color: #333333\">&gt;</span>\n    <span style=\"color: #333333\">&lt;/</span>React.StrictMode<span style=\"color: #333333\">&gt;</span>\n  );\n}\n</pre></div>\n    <br>\n    To enable StrictMode, <b><code style=\"display: inline; font-size: 1.4rem;\">&lt;React.StrictMode&gt;</code></b> tags need to be added inside the application:\n    <br>\n    <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #008800; font-weight: bold\">import</span> React <span style=\"color: #007020\">from</span> <span style=\"background-color: #fff0f0\">\"react\"</span>;\n<span style=\"color: #008800; font-weight: bold\">import</span> ReactDOM <span style=\"color: #007020\">from</span> <span style=\"background-color: #fff0f0\">\"react-dom\"</span>;\n\n<span style=\"color: #008800; font-weight: bold\">import</span> App <span style=\"color: #007020\">from</span> <span style=\"background-color: #fff0f0\">\"./App\"</span>;\n\nconst rootElement <span style=\"color: #333333\">=</span> document.getElementById(<span style=\"background-color: #fff0f0\">\"root\"</span>);\nReactDOM.render(\n <span style=\"color: #333333\">&lt;</span>React.StrictMode<span style=\"color: #333333\">&gt;</span>\n   <span style=\"color: #333333\">&lt;</span>App <span style=\"color: #333333\">/&gt;</span>\n <span style=\"color: #333333\">&lt;/</span>React.StrictMode<span style=\"color: #333333\">&gt;</span>,\n rootElement\n);\n</pre></div>\n    <br>\n    StrictMode currently helps with the following issues:\n    <ul class=\"list-text\">\n      <li>\n        <b>Identifying components with unsafe lifecycle methods</b>\n        <br>\n        Certain lifecycle methods are unsafe to use in asynchronous react applications. With the use of third-party libraries it becomes difficult to ensure that certain lifecycle methods are not used. \n        <br>\n        StrictMode helps in providing us a warning if any of the class components uses an unsafe lifecycle method.\n      </li>\n      <br>\n      <li>\n        <b>Warning about the usage of legacy string API</b>\n        <br>\n        If one is using an older version of React, <b>callback ref</b> is the recommended way to manage <b>refs</b> instead of using the <b>string refs</b>. StrictMode gives a warning if we are using <b>string refs</b> to manage refs. \n      </li>\n      <br>\n      <li>\n        <b>Warning about the usage of findDOMNode</b>\n        <br>\n        Previously, findDOMNode( ) method was used to search the tree of a DOM node. This method is deprecated in React. Hence, the StrictMode gives us a warning about the usage of this method.\n      </li>\n      <li>\n        Warning about the usage of legacy context API (because the API is error-prone)\n      </li>\n    </ul>\n    <br><br>\n  </div>\n\n  <h3 id=\"react-prevent-rerender\"> 8. How to prevent re-renders in React?</h3>\n  <div>\n    <b>Reason for re-renders in React:</b>\n    <br>\n    Re-rendering of a component and it’s child components occur when props or state of the component has been changed. \n    <br>\n    Re-rendering components that are not updated, affects the performance of an application. \n    <br><br>\n    <b>How to prevent re-rendering:</b>\n    <br>\n    Consider the following components: \n    <br>\n    <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #007020\">class</span> <span style=\"color: #008800; font-weight: bold\">Parent</span> extends React.Component {\n state <span style=\"color: #333333\">=</span> { messageDisplayed: <span style=\"color: #008800; font-weight: bold\">false</span> };\n componentDidMount() {\n   this.setState({ messageDisplayed: <span style=\"color: #008800; font-weight: bold\">true</span> });\n }\n\n <span style=\"color: #007020\">render</span>() {\n   console.log(<span style=\"background-color: #fff0f0\">\"Parent is getting rendered\"</span>);\n   <span style=\"color: #008800; font-weight: bold\">return</span> (\n     <span style=\"color: #333333\">&lt;</span><span style=\"color: #007020\">div</span> className<span style=\"color: #333333\">=</span><span style=\"background-color: #fff0f0\">\"App\"</span><span style=\"color: #333333\">&gt;</span>\n       <span style=\"color: #333333\">&lt;</span>Message <span style=\"color: #333333\">/&gt;</span>\n     <span style=\"color: #333333\">&lt;/</span><span style=\"color: #007020\">div</span><span style=\"color: #333333\">&gt;</span>\n   );\n }\n}\n\n<span style=\"color: #007020\">class</span> Message extends React.Component {\n constructor(props) {\n   super(props);\n   this.state <span style=\"color: #333333\">=</span> { message: <span style=\"background-color: #fff0f0\">\"Hello, this is vivek\"</span> };\n }  \n <span style=\"color: #007020\">render</span>() {\n   console.log(<span style=\"background-color: #fff0f0\">\"Message is getting rendered\"</span>);\n   <span style=\"color: #008800; font-weight: bold\">return</span> (\n     <span style=\"color: #333333\">&lt;</span><span style=\"color: #007020\">div</span><span style=\"color: #333333\">&gt;</span>\n       <span style=\"color: #333333\">&lt;</span>p<span style=\"color: #333333\">&gt;</span>{this.state.message}<span style=\"color: #333333\">&lt;/</span>p<span style=\"color: #333333\">&gt;</span>\n     <span style=\"color: #333333\">&lt;/</span><span style=\"color: #007020\">div</span><span style=\"color: #333333\">&gt;</span>\n   );\n }\n}\n</pre></div>\n    <br>\n    <b>Parent</b> component is the parent component and <b>Message</b> is the child component. Any change in the parent component will lead to re-rendering of the child component as well. \n    <br>\n    To prevent the re-rendering of child component, we use the shouldComponentUpdate( ) method:\n    <br><br>\n    <b>**Note- Use shouldComponentUpdate( ) method only when you are sure that it’s a static component.</b>\n    <br>\n    <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #007020\">class</span> Message extends React.Component {\n constructor(props) {\n   super(props);\n   this.state <span style=\"color: #333333\">=</span> { message: <span style=\"background-color: #fff0f0\">\"Hello, this is vivek\"</span> };\n }\n shouldComponentUpdate() {\n   console.log(<span style=\"background-color: #fff0f0\">\"Does not get rendered\"</span>);\n   <span style=\"color: #008800; font-weight: bold\">return</span> <span style=\"color: #008800; font-weight: bold\">false</span>;\n }\n <span style=\"color: #007020\">render</span>() {\n   console.log(<span style=\"background-color: #fff0f0\">\"Message is getting rendered\"</span>);\n   <span style=\"color: #008800; font-weight: bold\">return</span> (\n     <span style=\"color: #333333\">&lt;</span><span style=\"color: #007020\">div</span><span style=\"color: #333333\">&gt;</span>\n       <span style=\"color: #333333\">&lt;</span>p<span style=\"color: #333333\">&gt;</span>{this.state.message}<span style=\"color: #333333\">&lt;/</span>p<span style=\"color: #333333\">&gt;</span>\n     <span style=\"color: #333333\">&lt;/</span><span style=\"color: #007020\">div</span><span style=\"color: #333333\">&gt;</span>\n   );\n }\n}\n</pre></div>\n    <br>\n    As one can see in the code above, we have returned <b>false</b> from the shouldComponentUpdate( ) method, which prevents the child component from re-rendering. \n    <br><br>\n  </div>\n\n  <h3 id=\"react-state-props\"> 9. Explain React state and props.</h3>\n  <div>\n    <table>\n      <tbody><tr>\n        <th> Props </th>\n        <th> State </th>\n      </tr>\n      <tr>\n        <td> Immutable </td>\n        <td> Owned by its component </td>\n      </tr>\n      <tr>\n        <td> Has better performance </td>\n        <td> Locally scoped </td>\n      </tr>\n      <tr>\n        <td> Can be passed to child components </td>\n        <td> Witeable/Mutable </td>\n      </tr>\n      <tr>\n        <td>  </td>\n        <td> has setState() method to modify properties </td>\n      </tr>\n      <tr>\n        <td>  </td>\n        <td> Changes to state can be asynchronous </td>\n      </tr>\n      <tr>\n        <td>  </td>\n        <td> can only be passed as props </td>\n      </tr>\n    </tbody></table>\n    <b>React State</b>\n    <br>\n    Every component in react has a built-in <b>state</b> object, which contains all the property values that belong to that component. \n    <br>\n    In other words, <b>the state object</b> controls the behaviour of a component. Any change in the property values of the state object leads to re-rendering of the component.\n    <br><br>\n    <b>**Note- State object is not available in functional components but, we can use React Hooks to add state to a functional component.</b>\n    <br><br>\n    <b>How to declare a state object?</b>\n    <br>\n    Example:\n    <br>\n    <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #008800; font-weight: bold\">class</span> Car <span style=\"color: #008800; font-weight: bold\">extends</span> React.Component{\n constructor(props){\n   <span style=\"color: #008800; font-weight: bold\">super</span>(props);\n   <span style=\"color: #008800; font-weight: bold\">this</span>.<span style=\"color: #996633\">state = </span>{\n     <span style=\"color: #996633\">brand: </span><span style=\"background-color: #fff0f0\">\"BMW\"</span>,\n     <span style=\"color: #996633\">color: </span><span style=\"background-color: #fff0f0\">\"black\"</span>\n   }\n }\n}\n</pre></div>\n    <br>\n    <b>How to use and update the state object?</b>\n    <br>\n    <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #008800; font-weight: bold\">class</span> Car <span style=\"color: #008800; font-weight: bold\">extends</span> React.Component {\n constructor(props) {\n   <span style=\"color: #008800; font-weight: bold\">super</span>(props);\n   <span style=\"color: #008800; font-weight: bold\">this</span>.<span style=\"color: #996633\">state = </span>{\n     <span style=\"color: #996633\">brand: </span><span style=\"background-color: #fff0f0\">\"BMW\"</span>,\n     <span style=\"color: #996633\">color: </span><span style=\"background-color: #fff0f0\">\"Black\"</span>\n   };\n }\n\n changeColor() {\n   <span style=\"color: #008800; font-weight: bold\">this</span>.setState(prevState <span style=\"color: #333333\">=&gt;</span> {\n     <span style=\"color: #008800; font-weight: bold\">return</span> { <span style=\"color: #996633\">color: </span><span style=\"background-color: #fff0f0\">\"Red\"</span> };\n   });\n }\n\n render() {\n   <span style=\"color: #008800; font-weight: bold\">return</span> (\n     <span style=\"color: #333333\">&lt;</span>div<span style=\"color: #333333\">&gt;</span>\n       <span style=\"color: #333333\">&lt;</span>button onClick<span style=\"color: #333333\">=</span>{() <span style=\"color: #333333\">=&gt;</span> <span style=\"color: #008800; font-weight: bold\">this</span>.changeColor()}<span style=\"color: #333333\">&gt;</span>Change Color<span style=\"color: #333333\">&lt;/</span>button<span style=\"color: #333333\">&gt;</span>\n       <span style=\"color: #333333\">&lt;</span>p<span style=\"color: #333333\">&gt;</span>{<span style=\"color: #008800; font-weight: bold\">this</span>.state.color}<span style=\"color: #333333\">&lt;/</span>p<span style=\"color: #333333\">&gt;</span>\n     <span style=\"color: #333333\">&lt;/</span>div<span style=\"color: #333333\">&gt;</span>\n   );\n }\n}\n</pre></div>\n    <br>\n    As one can see in the code above, we can use the state by calling <b>this.state.propertyName</b> and we can change the state object property using <b>setState</b> method.\n    <br>\n    <b>React Props</b>\n    <br>\n    Every react component, accepts a single object argument called <b>props</b> (which stands for “properties”). \n    <br>\n    These props can be passed to a component using HTML attributes and the component accepts these props as an argument.\n    <br>\n    Using props, we can pass data from one component to another. \n    <br>\n    Passing props to a component: \n    <br>\n    While rendering a component, we can pass the props as a HTML attribute: \n    <br>\n    <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #007700\">&lt;Car</span> <span style=\"color: #0000CC\">brand=</span><span style=\"background-color: #fff0f0\">\"Mercedes\"</span><span style=\"color: #007700\">/&gt;</span>\n</pre></div>\n    <br>\n    The component receives the props: \n    <br>\n    In Class component: \n    <br>\n    <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #008800; font-weight: bold\">class</span> Car <span style=\"color: #008800; font-weight: bold\">extends</span> React.Component {\n constructor(props) {\n   <span style=\"color: #008800; font-weight: bold\">super</span>(props);\n   <span style=\"color: #008800; font-weight: bold\">this</span>.<span style=\"color: #996633\">state = </span>{\n     <span style=\"color: #996633\">brand: </span><span style=\"color: #008800; font-weight: bold\">this</span>.props.brand,\n     <span style=\"color: #996633\">color: </span><span style=\"background-color: #fff0f0\">\"Black\"</span>\n   };\n }\n}\n</pre></div>\n    <br>\n    In Functional component:\n    <br>\n    <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #008800; font-weight: bold\">function</span> Car(props) {\n <span style=\"color: #008800; font-weight: bold\">let</span> [brand, setBrand] <span style=\"color: #333333\">=</span> useState(props.brand);\n}\n</pre></div>\n    <br>\n    <b>****Note- Props are read-only. They cannot be manipulated or changed inside a component.</b>\n    <br><br>\n  </div>\n\n  <h3 id=\"react-hooks\"> 10. Explain React Hooks.  </h3>\n  <div>\n    <b>What are Hooks?</b>\n    Hooks are functions that let us “hook into” React state and lifecycle features from <b>a functional component</b>.\n    <br>\n    React Hooks <b>cannot</b> be used in class components. They let us write components without class. \n    <br><br>\n    <b>Why were Hooks introduced in React?</b>\n    <br>\n    React hooks were introduced in the 16.8 version of React. \n    <br>\n    Previously, functional components were called stateless components. Only class components were used for state management and lifecycle methods. \n    <br>\n    The need to change a functional component to a class component, whenever state management or lifecycle methods were to be used, led to the development of Hooks.\n    <br>\n    <b>Example of a hook:</b>\n    <br>\n    <b>useState hook:</b>\n    <br>\n    In functional components, useState hook lets us define state for a component:\n    <br>\n    <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #008800; font-weight: bold\">function</span> Person(props) {\n <span style=\"color: #888888\">// We are declaring a state variable called name.</span>\n <span style=\"color: #888888\">// setName is a function to update/change the value of name</span>\n <span style=\"color: #008800; font-weight: bold\">let</span> [name, setName] <span style=\"color: #333333\">=</span> useState(<span style=\"background-color: #fff0f0\">''</span>);\n}\n</pre></div>\n    <br>\n    The state variable “name” can be directly used inside the HTML. \n    <br><br>\n  </div>\n\n  <h3 id=\"react-style-components\"> 11. What are the different ways to style a React component?  </h3>\n  <div>\n    There are many different ways through which one can style a React component. Some of the ways are :\n    <ul class=\"list-text\">\n      <li>\n        <b>Inline Styling</b>\n        <br>\n        We can directly style an element using inline style attributes. \n        <br>\n        Make sure the value of style is a JavaScript object:\n        <br>\n        <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #007020\">class</span> RandomComponent extends React.Component {\n <span style=\"color: #007020\">render</span>() {\n   <span style=\"color: #008800; font-weight: bold\">return</span> (\n     <span style=\"color: #333333\">&lt;</span><span style=\"color: #007020\">div</span><span style=\"color: #333333\">&gt;</span>\n       <span style=\"color: #333333\">&lt;</span>h3 style<span style=\"color: #333333\">=</span>{{ color: <span style=\"background-color: #fff0f0\">\"Yellow\"</span> }}<span style=\"color: #333333\">&gt;</span>This is a heading<span style=\"color: #333333\">&lt;/</span>h3<span style=\"color: #333333\">&gt;</span>\n       <span style=\"color: #333333\">&lt;</span>p style<span style=\"color: #333333\">=</span>{{ fontSize: <span style=\"background-color: #fff0f0\">\"32px\"</span> }}<span style=\"color: #333333\">&gt;</span>This is a paragraph<span style=\"color: #333333\">&lt;/</span>p<span style=\"color: #333333\">&gt;</span>\n     <span style=\"color: #333333\">&lt;/</span><span style=\"color: #007020\">div</span><span style=\"color: #333333\">&gt;</span>\n   );\n }\n}\n</pre></div>\n      </li>\n      <li>\n        <b>Using JavaScript object</b>\n        <br>\n        We can create a separate JavaScript object and set the desired style properties.\n        <br>\n        This object can be used as the value of the inline style attribute.\n        <br>\n        <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #007020\">class</span> RandomComponent extends React.Component {\n paragraphStyles <span style=\"color: #333333\">=</span> {\n   color: <span style=\"background-color: #fff0f0\">\"Red\"</span>,\n   fontSize: <span style=\"background-color: #fff0f0\">\"32px\"</span>\n };\n\n headingStyles <span style=\"color: #333333\">=</span> {\n   color: <span style=\"background-color: #fff0f0\">\"blue\"</span>,\n   fontSize: <span style=\"background-color: #fff0f0\">\"48px\"</span>\n };\n\n <span style=\"color: #007020\">render</span>() {\n   <span style=\"color: #008800; font-weight: bold\">return</span> (\n     <span style=\"color: #333333\">&lt;</span><span style=\"color: #007020\">div</span><span style=\"color: #333333\">&gt;</span>\n       <span style=\"color: #333333\">&lt;</span>h3 style<span style=\"color: #333333\">=</span>{this.headingStyles}<span style=\"color: #333333\">&gt;</span>This is a heading<span style=\"color: #333333\">&lt;/</span>h3<span style=\"color: #333333\">&gt;</span>\n       <span style=\"color: #333333\">&lt;</span>p style<span style=\"color: #333333\">=</span>{this.paragraphStyles}<span style=\"color: #333333\">&gt;</span>This is a paragraph<span style=\"color: #333333\">&lt;/</span>p<span style=\"color: #333333\">&gt;</span>\n     <span style=\"color: #333333\">&lt;/</span><span style=\"color: #007020\">div</span><span style=\"color: #333333\">&gt;</span>\n   );\n }\n}\n</pre></div>\n      </li>\n      <li>\n        <b>CSS Stylesheet</b>\n        <br>\n        We can create a separate CSS file and write all the styles for the component inside that file. This file needs to be imported inside the component file.\n        <br>\n        <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #008800; font-weight: bold\">import</span> <span style=\"background-color: #fff0f0\">'./RandomComponent.css'</span>;\n\n<span style=\"color: #007020\">class</span> RandomComponent extends React.Component {\n <span style=\"color: #007020\">render</span>() {\n   <span style=\"color: #008800; font-weight: bold\">return</span> (\n     <span style=\"color: #333333\">&lt;</span><span style=\"color: #007020\">div</span><span style=\"color: #333333\">&gt;</span>\n       <span style=\"color: #333333\">&lt;</span>h3 className<span style=\"color: #333333\">=</span><span style=\"background-color: #fff0f0\">\"heading\"</span><span style=\"color: #333333\">&gt;</span>This is a heading<span style=\"color: #333333\">&lt;/</span>h3<span style=\"color: #333333\">&gt;</span>\n       <span style=\"color: #333333\">&lt;</span>p className<span style=\"color: #333333\">=</span><span style=\"background-color: #fff0f0\">\"paragraph\"</span><span style=\"color: #333333\">&gt;</span>This is a paragraph<span style=\"color: #333333\">&lt;/</span>p<span style=\"color: #333333\">&gt;</span>\n     <span style=\"color: #333333\">&lt;/</span><span style=\"color: #007020\">div</span><span style=\"color: #333333\">&gt;</span>\n   );\n }\n}\n</pre></div>\n      </li>\n      <li>\n        <b>CSS Modules</b>\n        <br>\n        We can create a separate CSS module and import this module inside our component. \n        Create a file with “.module.css”‘ extension, \n        <br>\n        styles.module.css:\n        <br>\n        <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #BB0066; font-weight: bold\">.paragraph</span>{\n <span style=\"color: #008800; font-weight: bold\">color</span><span style=\"color: #333333\">:</span><span style=\"background-color: #fff0f0\">\"red\"</span>;\n <span style=\"color: #008800; font-weight: bold\">border</span><span style=\"color: #333333\">:</span><span style=\"color: #6600EE; font-weight: bold\">1px</span> <span style=\"color: #008800; font-weight: bold\">solid</span> <span style=\"color: #007020\">black</span>;\n}\n</pre></div>\n        <br>\n        We can import this file inside the component and use it:\n        <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\">import styles from  './styles.module.css';\n\nclass RandomComponent extends React.Component <span style=\"color: #557799\">{</span>\n <span style=\"color: #0000CC\">render</span><span style=\"color: #333333\">()</span> <span style=\"color: #333333\">{</span>\n   <span style=\"color: #0000CC\">return</span> <span style=\"color: #333333\">(</span>\n     <span style=\"color: #333333\">&lt;</span><span style=\"color: #0000CC\">div</span><span style=\"color: #333333\">&gt;</span>\n       <span style=\"color: #333333\">&lt;</span><span style=\"color: #0000CC\">h3</span> <span style=\"color: #0000CC\">className</span><span style=\"color: #333333\">=</span><span style=\"background-color: #fff0f0\">\"heading\"</span><span style=\"color: #333333\">&gt;</span><span style=\"color: #0000CC\">This</span> <span style=\"color: #0000CC\">is</span> <span style=\"color: #0000CC\">a</span> <span style=\"color: #0000CC\">heading</span><span style=\"color: #333333\">&lt;/</span><span style=\"color: #0000CC\">h3</span><span style=\"color: #333333\">&gt;</span>\n       <span style=\"color: #333333\">&lt;</span><span style=\"color: #0000CC\">p</span> <span style=\"color: #0000CC\">className</span><span style=\"color: #333333\">={</span><span style=\"color: #0000CC\">styles</span><span style=\"color: #333333\">.</span><span style=\"color: #0000CC\">paragraph</span><span style=\"color: #557799\">}</span> &gt;This is a paragraph<span style=\"color: #007700\">&lt;/p&gt;</span>\n     <span style=\"color: #007700\">&lt;/div&gt;</span>\n   );\n }\n}\n</pre></div>\n      </li>\n    </ul>\n    <br><br>\n  </div>\n\n  <h3 id=\"react-performance\"> 12. Name a few techniques to optimize React app performance.  </h3>\n  <div>\n    There are many ways through which one can optimize the performance of a React app, let’s have a look at some of them:\n    <br><br>\n    <ul class=\"list-text\">\n      <li>\n        <b>Using useMemo( ) - </b>\n        <br>\n        It is a React hook that is used for caching CPU-Expensive functions. \n        <br>\n        Sometimes in a React app, a CPU-Expensive function gets called repeatedly due to re-renders of a component, which can lead to slow rendering. \n        <br>\n        useMemo( ) hook can be used to cache such functions. By using useMemo( ), the CPU-Expensive function gets called only when it is needed.\n        <br><br>\n      </li>\n      <li>\n        <b>Using React.PureComponent - </b>\n        <br>\n        It is a base component class that checks state and props of a component to know whether the component should be updated. \n        <br>\n        Instead of using the simple React.Component, we can use React.PureComponent to reduce the re-renders of a component unnecessarily.\n        <br><br>\n      </li>\n      <li>\n        <b>Maintaining State Colocation -</b>\n        <br>\n        This is a process of moving the state as close to where you need it as possible. \n        <br>\n        Sometimes in React app, we have a lot of unnecessary states inside the parent component which makes the code less readable and harder to maintain. Not to forget, having many states inside a single component leads to unnecessary re-renders for the component. \n        <br>\n        It is better to shift states which are less valuable to the parent component, to a separate component.\n        <br><br>\n      </li>\n      <li>\n        <b>Lazy Loading - </b>\n        <br>\n        It is a technique used to reduce the load time of a React app. Lazy loading helps reduce the risk of web app performances to minimal.\n      </li>\n    </ul>\n    <br><br>\n  </div>\n\n\n  <h3 id=\"react-keys\"> 13. What are keys in React? </h3>\n  <div>\n    <center><img src=\"https://assets.interviewbit.com/assets/skill_interview_questions/react/react-way-66f68fa8d80b677f487c70ee5e804ecaa70e0f78f63e1543a103ac56ed6e028e.png.gz\" width=\"900px;\"></center>\n    A key is a special string attribute that needs to be included when using lists of elements.\n    <br>\n    Example of a list using key:\n    <br>\n    <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\">const <span style=\"color: #996633\">ids = </span>[<span style=\"color: #0000DD; font-weight: bold\">1</span>,<span style=\"color: #0000DD; font-weight: bold\">2</span>,<span style=\"color: #0000DD; font-weight: bold\">3</span>,<span style=\"color: #0000DD; font-weight: bold\">4</span>,<span style=\"color: #0000DD; font-weight: bold\">5</span>];\nconst <span style=\"color: #996633\">listElements = </span>ids.map(<span style=\"color: #0066BB; font-weight: bold\">(id)=&gt;</span>{\n <span style=\"color: #008800; font-weight: bold\">return</span>(\n <span style=\"color: #333333\">&lt;</span>li key<span style=\"color: #333333\">=</span>{id.toString()}<span style=\"color: #333333\">&gt;</span>\n   {id}\n <span style=\"color: #333333\">&lt;/</span>li<span style=\"color: #333333\">&gt;</span>\n )\n})\n</pre></div>\n    <br>\n    <b>Importance of keys</b>\n    <br>\n    Keys help react identify which elements were added, changed or removed. \n    <br>\n    Keys should be given to array elements for providing a unique identity for each element.\n    <br>\n    Without keys, React does not understand the order or uniqueness of each element. \n    <br>\n    With keys, React has an idea of which particular element was deleted,edited, and added.\n    <br>\n    Keys are generally used for displaying a list of data coming from an API.\n    <br>\n    <b>***Note- Keys used within arrays should be unique among siblings. They need not be globally unique. </b>\n    <br><br>\n  </div>\n\n  <h3 id=\"react-pass-data\"> 14. How to pass data between react components? </h3>\n  <div>\n    <center><img src=\"https://assets.interviewbit.com/assets/skill_interview_questions/react/parent-child-08a78d11384e8648988c4ef517f35c68c344bf35c29c90f5d518b41c756193d6.png.gz\" width=\"900px;\"></center>\n    <b>Parent Component to Child Component (using props)</b>\n    <br>\n    With the help of props, we can send data from a parent to a child component.\n    <br>\n    How do we do this?\n    <br><br>\n    Consider the following Parent Component:\n    <br>\n    <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\">import ChildComponent from <span style=\"background-color: #fff0f0\">\"./Child\"</span>;\n\n    function ParentComponent(props) {\n     let [counter, setCounter] <span style=\"color: #333333\">=</span> useState(<span style=\"color: #0000DD; font-weight: bold\">0</span>);\n    \n     let <span style=\"color: #996633\">increment = </span>() <span style=\"color: #333333\">=&gt;</span> setCounter(<span style=\"color: #333333\">++</span>counter);\n    \n     <span style=\"color: #008800; font-weight: bold\">return</span> (\n       <span style=\"color: #333333\">&lt;</span>div<span style=\"color: #333333\">&gt;</span>\n         <span style=\"color: #333333\">&lt;</span>button onClick<span style=\"color: #333333\">=</span>{increment}<span style=\"color: #333333\">&gt;</span>Increment Counter<span style=\"color: #333333\">&lt;/</span>button<span style=\"color: #333333\">&gt;</span>\n         <span style=\"color: #333333\">&lt;</span>ChildComponent counterValue<span style=\"color: #333333\">=</span>{counter} <span style=\"color: #333333\">/&gt;</span>\n       <span style=\"color: #333333\">&lt;/</span>div<span style=\"color: #333333\">&gt;</span>\n     );\n    }\n    </pre></div>    \n      <br>\n      As one can see in the code above, we are rendering the child component inside the parent component, by providing a prop called counterValue. Value of the counter is being passed from the parent to the child component. \n      <br>\n      We can use the data passed by the parent component in the following way:\n      <br>\n      <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\">function ChildComponent(props) {\n <span style=\"color: #008800; font-weight: bold\">return</span> (\n   <span style=\"color: #333333\">&lt;</span>div<span style=\"color: #333333\">&gt;</span>\n     <span style=\"color: #333333\">&lt;</span>p<span style=\"color: #333333\">&gt;</span>Value <span style=\"color: #008800; font-weight: bold\">of</span> <span style=\"color: #996633\">counter: </span>{props.counterValue}<span style=\"color: #333333\">&lt;/</span>p<span style=\"color: #333333\">&gt;</span>\n   <span style=\"color: #333333\">&lt;/</span>div<span style=\"color: #333333\">&gt;</span>\n );\n}\n</pre></div>\n    <br>\n    We use the <b>props.counterValue</b> to display the data passed on by the parent component.\n    <br>\n    <b>Child Component to Parent Component (using callbacks)</b>\n    <br>\n    This one is a bit tricky. We follow the steps below:\n    <ul class=\"list-text\">\n      <li>\n        Create a callback in the parent component which takes in the data needed as a parameter.\n      </li>\n      <li>\n        Pass this callback as a prop to the child component. \n      </li>\n      <li>\n        Send data from the child component using the callback.\n      </li>\n    </ul>\n    We are considering the same example above but in this case, we are going to pass the updated <b>counterValue</b> from child to parent.\n    <br>\n    <b>Step1 and Step2</b>: Create a callback in the parent component, pass this callback as a prop.\n    <br>\n    <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\">function ParentComponent(props) {\n let [counter, setCounter] <span style=\"color: #333333\">=</span> useState(<span style=\"color: #0000DD; font-weight: bold\">0</span>);\n\n let <span style=\"color: #996633\">callback = </span>valueFromChild <span style=\"color: #333333\">=&gt;</span> setCounter(valueFromChild);\n\n <span style=\"color: #008800; font-weight: bold\">return</span> (\n   <span style=\"color: #333333\">&lt;</span>div<span style=\"color: #333333\">&gt;</span>\n     <span style=\"color: #333333\">&lt;</span>p<span style=\"color: #333333\">&gt;</span>Value <span style=\"color: #008800; font-weight: bold\">of</span> <span style=\"color: #996633\">counter: </span>{counter}<span style=\"color: #333333\">&lt;/</span>p<span style=\"color: #333333\">&gt;</span>\n     <span style=\"color: #333333\">&lt;</span>ChildComponent callbackFunc<span style=\"color: #333333\">=</span>{callback} counterValue<span style=\"color: #333333\">=</span>{counter} <span style=\"color: #333333\">/&gt;</span>\n   <span style=\"color: #333333\">&lt;/</span>div<span style=\"color: #333333\">&gt;</span>\n );\n}\n</pre></div>\n    <br>\n    As one can see in the code above, we created a function called <b>callback</b> which takes in the data received from the child component as a parameter. \n    <br>\n    Next, we passed the function <b>callback</b> as a prop to the child component.\n    <br>\n    <b>Step3</b>: Pass data from child to the parent component.\n    <br>\n    <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\">function ChildComponent(props) {\n let <span style=\"color: #996633\">childCounterValue = </span>props.counterValue;\n\n <span style=\"color: #008800; font-weight: bold\">return</span> (\n   <span style=\"color: #333333\">&lt;</span>div<span style=\"color: #333333\">&gt;</span>\n     <span style=\"color: #333333\">&lt;</span>button onClick<span style=\"color: #333333\">=</span>{() <span style=\"color: #333333\">=&gt;</span> props.callbackFunc(<span style=\"color: #333333\">++</span>childCounterValue)}<span style=\"color: #333333\">&gt;</span>\n       Increment Counter\n     <span style=\"color: #333333\">&lt;/</span>button<span style=\"color: #333333\">&gt;</span>\n   <span style=\"color: #333333\">&lt;/</span>div<span style=\"color: #333333\">&gt;</span>\n );\n}\n</pre></div>\n    <br>\n    In the code above, we have used the <b>props.counterValue</b> and set it to a variable called <b>childCounterValue</b>.\n    <br>\n    Next, on button click, we pass the incremented childCounterValue to the <b>props.callbackFunc</b>. \n    <br>\n    This way, we can pass data from the child to the parent component. \n    <br><br>\n  <div>\n\n  <h3 id=\"react-hoc\"> 15. What are Higher Order Components? </h3>\n  <div>\n    Simply put, Higher Order Component(HOC) is a function that takes in a component and returns a new component. \n    <br><br>\n    <center><img src=\"https://assets.interviewbit.com/assets/skill_interview_questions/react/component-higher-component-2bf94eac9671642e9b8419ee520cf77a4184bb29394cb897fd1e9872c9d7e2c8.png.gz\" width=\"900px;\"></center>\n    <b>When do we need a Higher Order Component?</b>\n    <br>\n    While developing React applications, we might develop components that are quite similar to each other with minute differences. \n    <br>\n    In most cases, developing similar components might not be an issue but, while developing larger applications we need to keep our code <b>DRY</b>, therefore, we want an <b>abstraction</b> that allows us to define this logic in a single place and share it across components. \n    <br>\n    HOC allows us to create that abstraction. \n    <br>\n    Example of a HOC:\n    <br>\n    Consider the following components having similar functionality\n    <br>\n    The following component displays the list of articles:\n    <br>\n<div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #888888\">// \"GlobalDataSource\" is some global data source</span>\n<span style=\"color: #008800; font-weight: bold\">class</span> ArticlesList <span style=\"color: #008800; font-weight: bold\">extends</span> React.Component {\n  constructor(props) {\n    <span style=\"color: #008800; font-weight: bold\">super</span>(props);\n    <span style=\"color: #008800; font-weight: bold\">this</span>.handleChange <span style=\"color: #333333\">=</span> <span style=\"color: #008800; font-weight: bold\">this</span>.handleChange.bind(<span style=\"color: #008800; font-weight: bold\">this</span>);\n    <span style=\"color: #008800; font-weight: bold\">this</span>.state <span style=\"color: #333333\">=</span> {\n      articles<span style=\"color: #333333\">:</span> GlobalDataSource.getArticles(),\n    };\n  }\n\n  componentDidMount() {\n    <span style=\"color: #888888\">// Listens to the changes added</span>\n    GlobalDataSource.addChangeListener(<span style=\"color: #008800; font-weight: bold\">this</span>.handleChange);\n  }\n\n  componentWillUnmount() {\n    <span style=\"color: #888888\">// Listens to the changes removed</span>\n    GlobalDataSource.removeChangeListener(<span style=\"color: #008800; font-weight: bold\">this</span>.handleChange);\n  }\n\n  handleChange() {\n    <span style=\"color: #888888\">// States gets Update whenver data source changes</span>\n    <span style=\"color: #008800; font-weight: bold\">this</span>.setState({\n      articles<span style=\"color: #333333\">:</span> GlobalDataSource.getArticles(),\n    });\n  }\n\n  render() {\n    <span style=\"color: #008800; font-weight: bold\">return</span> (\n      <span style=\"color: #333333\">&lt;</span>div<span style=\"color: #333333\">&gt;</span>\n        {<span style=\"color: #008800; font-weight: bold\">this</span>.state.articles.map((article) <span style=\"color: #333333\">=&gt;</span> (\n          <span style=\"color: #333333\">&lt;</span>ArticleData article<span style=\"color: #333333\">=</span>{article} key<span style=\"color: #333333\">=</span>{article.id} <span style=\"color: #333333\">/&gt;</span>\n        ))}\n      <span style=\"color: #333333\">&lt;</span>/div<span style=\"color: #333333\">&gt;</span>\n    );\n  }\n}\n</pre>\n</div>\n    <br>\n    The following component displays the list of users:\n    <br>\n<div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #888888\">// \"GlobalDataSource\" is some global data source</span>\n<span style=\"color: #008800; font-weight: bold\">class</span> UsersList <span style=\"color: #008800; font-weight: bold\">extends</span> React.Component {\n  constructor(props) {\n    <span style=\"color: #008800; font-weight: bold\">super</span>(props);\n    <span style=\"color: #008800; font-weight: bold\">this</span>.handleChange <span style=\"color: #333333\">=</span> <span style=\"color: #008800; font-weight: bold\">this</span>.handleChange.bind(<span style=\"color: #008800; font-weight: bold\">this</span>);\n    <span style=\"color: #008800; font-weight: bold\">this</span>.state <span style=\"color: #333333\">=</span> {\n      users<span style=\"color: #333333\">:</span> GlobalDataSource.getUsers(),\n    };\n  }\n\n  componentDidMount() {\n    <span style=\"color: #888888\">// Listens to the changes added</span>\n    GlobalDataSource.addChangeListener(<span style=\"color: #008800; font-weight: bold\">this</span>.handleChange);\n  }\n\n  componentWillUnmount() {\n    <span style=\"color: #888888\">// Listens to the changes removed</span>\n    GlobalDataSource.removeChangeListener(<span style=\"color: #008800; font-weight: bold\">this</span>.handleChange);\n  }\n\n  handleChange() {\n    <span style=\"color: #888888\">// States gets Update whenver data source changes</span>\n    <span style=\"color: #008800; font-weight: bold\">this</span>.setState({\n      users<span style=\"color: #333333\">:</span> GlobalDataSource.getUsers(),\n    });\n  }\n\n  render() {\n    <span style=\"color: #008800; font-weight: bold\">return</span> (\n      <span style=\"color: #333333\">&lt;</span>div<span style=\"color: #333333\">&gt;</span>\n        {<span style=\"color: #008800; font-weight: bold\">this</span>.state.users.map((user) <span style=\"color: #333333\">=&gt;</span> (\n          <span style=\"color: #333333\">&lt;</span>UserData user<span style=\"color: #333333\">=</span>{user} key<span style=\"color: #333333\">=</span>{user.id} <span style=\"color: #333333\">/&gt;</span>\n        ))}\n      <span style=\"color: #333333\">&lt;/</span>div<span style=\"color: #333333\">&gt;</span>\n    );\n  }\n}\n</pre></div>\n    <br>\n    Notice the above components, both have similar functionality but, they are calling different methods to an API endpoint. \n    <br>\n    Let’s create a Higher Order Component to create an abstraction:\n    <br>\n<div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #888888\">// Higher Order Component which takes a component</span>\n<span style=\"color: #888888\">// as input and returns another component</span>\n<span style=\"color: #888888\">// \"GlobalDataSource\" is some global data source</span>\n<span style=\"color: #008800; font-weight: bold\">function</span> HOC(WrappedComponent, selectData) {\n  <span style=\"color: #008800; font-weight: bold\">return</span> <span style=\"color: #008800; font-weight: bold\">class</span> <span style=\"color: #008800; font-weight: bold\">extends</span> React.Component {\n    constructor(props) {\n      <span style=\"color: #008800; font-weight: bold\">super</span>(props);\n      <span style=\"color: #008800; font-weight: bold\">this</span>.handleChange <span style=\"color: #333333\">=</span> <span style=\"color: #008800; font-weight: bold\">this</span>.handleChange.bind(<span style=\"color: #008800; font-weight: bold\">this</span>);\n      <span style=\"color: #008800; font-weight: bold\">this</span>.state <span style=\"color: #333333\">=</span> {\n        data<span style=\"color: #333333\">:</span> selectData(GlobalDataSource, props),\n      };\n    }\n\n    componentDidMount() {\n      <span style=\"color: #888888\">// Listens to the changes added</span>\n      GlobalDataSource.addChangeListener(<span style=\"color: #008800; font-weight: bold\">this</span>.handleChange);\n    }\n\n    componentWillUnmount() {\n      <span style=\"color: #888888\">// Listens to the changes removed</span>\n      GlobalDataSource.removeChangeListener(<span style=\"color: #008800; font-weight: bold\">this</span>.handleChange);\n    }\n\n    handleChange() {\n      <span style=\"color: #008800; font-weight: bold\">this</span>.setState({\n        data<span style=\"color: #333333\">:</span> selectData(GlobalDataSource, <span style=\"color: #008800; font-weight: bold\">this</span>.props),\n      });\n    }\n\n    render() {\n      <span style=\"color: #888888\">// Rendering the wrapped component with the latest data data</span>\n      <span style=\"color: #008800; font-weight: bold\">return</span> <span style=\"color: #333333\">&lt;</span>WrappedComponent data<span style=\"color: #333333\">=</span>{<span style=\"color: #008800; font-weight: bold\">this</span>.state.data} {...<span style=\"color: #008800; font-weight: bold\">this</span>.props} <span style=\"color: #333333\">/&gt;</span>;\n    }\n  };\n}\n</pre>\n</div>\n    <br>\n    We know HOC is a function that takes in a component and returns a component.\n    <br>\n    In the code above, we have created a function called HOC which returns a component and performs a functionality that can be shared across both <b>ArticlesList</b> component and <b>UsersList Component</b>.\n    <br>\n    The second parameter in the HOC function is the function that calls the method on the API endpoint.\n    <br>\n    We have reduced the duplicated code of the <b>componentDidUpdate</b> and <b>componentDidMount</b> functions.\n    <br>\n    Using the concept of Higher Order Components, we can now render the <b>ArticlesList</b> and <b>UsersList</b> component in the following way:\n    <br>\n<div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #008800; font-weight: bold\">const</span> ArticlesListWithHOC <span style=\"color: #333333\">=</span> HOC(ArticlesList, (GlobalDataSource) <span style=\"color: #333333\">=&gt;</span> GlobalDataSource.getArticles());\n<span style=\"color: #008800; font-weight: bold\">const</span> UsersListWithHOC <span style=\"color: #333333\">=</span> HOC(UsersList, (GlobalDataSource) <span style=\"color: #333333\">=&gt;</span> GlobalDataSource.getUsers());\n</pre>\n</div>\n    <br>\n    Remember, we are not trying to change the functionality of each component, we are trying to share a single functionality across multiple components using HOC. \n    <br><br>\n  </div>\n\n  <h3 id=\"react-prop-drilling\"> 16. What is prop drilling in React? </h3>\n  <div>\n    <center><img src=\"https://assets.interviewbit.com/assets/skill_interview_questions/react/prop-drilling-8c64f4d4219c5d9535272d44774fa09e494a07d2a2f2cc735ea2e73d1be56821.png.gz\" width=\"900px;\"></center>\n    Sometimes while developing React applications, there is a need to pass data from a component that is higher in the hierarchy to a component that is deeply nested. \n    <br>\n    To pass data between such components, we pass props from a source component, and keep passing the prop to the next component in the hierarchy till we reach the deeply nested component.\n    <br>\n    The disadvantage of using prop drilling is that the components that should otherwise be not aware of the data have access to the data.\n    <br><br>\n  </div>\n\n\n  <h3 id=\"react-error-boundary\"> 17. What are error boundaries? </h3>\n  <div>\n    Introduced in the version 16 of React, Error boundaries provide a way for us to catch errors that occur in the render phase. \n    <br><br>\n    <b>What is an error boundary?</b>\n    <br>\n    Any component which uses one of the following lifecycle methods, is considered an error boundary.\n    <br>\n    In what places can an error boundary detect an error?\n    <ul class=\"list-text\">\n      <li>\n        Render phase\n      </li>\n      <li>\n        Inside a lifecycle method\n      </li>\n      <li>\n        Inside the constructor\n      </li>\n    </ul>\n    <b>Without using error boundaries:</b>\n    <br>\n    <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #008800; font-weight: bold\">class</span> CounterComponent <span style=\"color: #008800; font-weight: bold\">extends</span> React.Component{\n constructor(props){\n   <span style=\"color: #008800; font-weight: bold\">super</span>(props);\n   <span style=\"color: #008800; font-weight: bold\">this</span>.<span style=\"color: #996633\">state = </span>{\n     <span style=\"color: #996633\">counterValue: </span><span style=\"color: #0000DD; font-weight: bold\">0</span>\n   }\n   <span style=\"color: #008800; font-weight: bold\">this</span>.<span style=\"color: #996633\">incrementCounter = </span><span style=\"color: #008800; font-weight: bold\">this</span>.incrementCounter.bind(<span style=\"color: #008800; font-weight: bold\">this</span>);\n }\n\n incrementCounter(){\n   <span style=\"color: #008800; font-weight: bold\">this</span>.setState(prevState <span style=\"color: #333333\">=&gt;</span> <span style=\"color: #996633\">counterValue = </span>prevState<span style=\"color: #333333\">+</span><span style=\"color: #0000DD; font-weight: bold\">1</span>);\n }\n\n render(){\n   <span style=\"color: #008800; font-weight: bold\">if</span>(<span style=\"color: #008800; font-weight: bold\">this</span>.state.counter <span style=\"color: #333333\">===</span> <span style=\"color: #0000DD; font-weight: bold\">2</span>){\n     <span style=\"color: #008800; font-weight: bold\">throw</span> <span style=\"color: #008800; font-weight: bold\">new</span> <span style=\"color: #007020\">Error</span>(<span style=\"background-color: #fff0f0\">'Crashed'</span>);\n   }\n\n   <span style=\"color: #008800; font-weight: bold\">return</span>(\n     <span style=\"color: #333333\">&lt;</span>div<span style=\"color: #333333\">&gt;</span>\n       <span style=\"color: #333333\">&lt;</span>button onClick<span style=\"color: #333333\">=</span>{<span style=\"color: #008800; font-weight: bold\">this</span>.incrementCounter}<span style=\"color: #333333\">&gt;</span>Increment Value<span style=\"color: #333333\">&lt;/</span>button<span style=\"color: #333333\">&gt;</span>\n       <span style=\"color: #333333\">&lt;</span>p<span style=\"color: #333333\">&gt;</span>Value <span style=\"color: #008800; font-weight: bold\">of</span> <span style=\"color: #996633\">counter: </span>{<span style=\"color: #008800; font-weight: bold\">this</span>.state.counterValue}<span style=\"color: #333333\">&lt;/</span>p<span style=\"color: #333333\">&gt;</span>\n     <span style=\"color: #333333\">&lt;/</span>div<span style=\"color: #333333\">&gt;</span>\n   )\n }\n}\n</pre></div>\n    <br>\n    In the code above, when the counterValue equals to 2, we throw an error inside the render method.\n    <br>\n    When we are not using the error boundary, instead of seeing an error, we see a blank page. \n    <br>\n    Since any error inside the render method, leads to unmounting of the component.\n    <br>\n    To display an error that occurs inside the render method, we use error boundaries.\n    <br><br>\n    <b>With error boundaries:</b>\n    <br>\n    As mentioned above, error boundary is a component using one or both of the following methods:\n    <br><br>\n    <b>static getDerivedStateFromError and componentDidCatch.</b>\n    <br>\n    Let’s create an error boundary to handle errors in render phase:\n    <br>\n    <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #008800; font-weight: bold\">class</span> ErrorBoundary <span style=\"color: #008800; font-weight: bold\">extends</span> React.Component {\n constructor(props) {\n   <span style=\"color: #008800; font-weight: bold\">super</span>(props);\n   <span style=\"color: #008800; font-weight: bold\">this</span>.<span style=\"color: #996633\">state = </span>{ <span style=\"color: #996633\">hasError: </span><span style=\"color: #008800; font-weight: bold\">false</span> };\n }\n\n static getDerivedStateFromError(error) {     \n   <span style=\"color: #008800; font-weight: bold\">return</span> { <span style=\"color: #996633\">hasError: </span><span style=\"color: #008800; font-weight: bold\">true</span> }; \n }\n  componentDidCatch(error, errorInfo) {       \n   logErrorToMyService(error, errorInfo); \n }\n\n render() {\n   <span style=\"color: #008800; font-weight: bold\">if</span> (<span style=\"color: #008800; font-weight: bold\">this</span>.state.hasError) {     \n     <span style=\"color: #008800; font-weight: bold\">return</span> <span style=\"color: #333333\">&lt;</span>h4<span style=\"color: #333333\">&gt;</span>Something went wrong<span style=\"color: #333333\">&lt;/</span>h4<span style=\"color: #333333\">&gt;</span>     \n   }\n   <span style=\"color: #008800; font-weight: bold\">return</span> <span style=\"color: #008800; font-weight: bold\">this</span>.props.children;\n }\n}\n</pre></div>\n    <br>\n    In the code above, <b>getDerivedStateFromError</b> function renders the fallback UI interface when the render method has an error.\n    <br>\n    <b>componentDidCatch</b> logs the error information to an error tracking service.\n    <br> \n    Now with error boundary, we can render the CounterComponent in the following way:\n    <br>\n    <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #007700\">&lt;ErrorBoundary&gt;</span>\n  <span style=\"color: #007700\">&lt;CounterComponent/&gt;</span>\n<span style=\"color: #007700\">&lt;/ErrorBoundary&gt;</span>\n</pre></div>\n    <br><br>\n  <div>\n\n\n\n</div>\n\n        </div>\n      </div>\n    </div>\n    <br><br>\n  </div></div>",
    "tags": [
      "LIFECYCLE"
    ]
  },
  {
    "text": "Explain Strict Mode in React.",
    "source": "https://www.interviewbit.com/react-interview-questions/",
    "answer": "<div>\n    StrictMode is a tool added in the <b>version 16.3</b> of React to highlight potential problems in an application. It performs additional checks on the application.\n    <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\">function App() {\n  <span style=\"color: #008800; font-weight: bold\">return</span> (\n    <span style=\"color: #333333\">&lt;</span>React.StrictMode<span style=\"color: #333333\">&gt;</span>\n      <span style=\"color: #333333\">&lt;</span><span style=\"color: #007020\">div</span> classname<span style=\"color: #333333\">=</span><span style=\"background-color: #fff0f0\">\"App\"</span><span style=\"color: #333333\">&gt;</span>\n        <span style=\"color: #333333\">&lt;</span><span style=\"color: #008800; font-weight: bold\">Header</span><span style=\"color: #333333\">/&gt;</span>\n        <span style=\"color: #333333\">&lt;</span><span style=\"color: #007020\">div</span><span style=\"color: #333333\">&gt;</span>\n          Page <span style=\"color: #007020\">Content</span>\n        <span style=\"color: #333333\">&lt;/</span><span style=\"color: #007020\">div</span><span style=\"color: #333333\">&gt;</span>\n        <span style=\"color: #333333\">&lt;</span>Footer<span style=\"color: #333333\">/&gt;</span>\n      <span style=\"color: #333333\">&lt;/</span><span style=\"color: #007020\">div</span><span style=\"color: #333333\">&gt;</span>\n    <span style=\"color: #333333\">&lt;/</span>React.StrictMode<span style=\"color: #333333\">&gt;</span>\n  );\n}\n</pre></div>\n    <br>\n    To enable StrictMode, <b><code style=\"display: inline; font-size: 1.4rem;\">&lt;React.StrictMode&gt;</code></b> tags need to be added inside the application:\n    <br>\n    <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #008800; font-weight: bold\">import</span> React <span style=\"color: #007020\">from</span> <span style=\"background-color: #fff0f0\">\"react\"</span>;\n<span style=\"color: #008800; font-weight: bold\">import</span> ReactDOM <span style=\"color: #007020\">from</span> <span style=\"background-color: #fff0f0\">\"react-dom\"</span>;\n\n<span style=\"color: #008800; font-weight: bold\">import</span> App <span style=\"color: #007020\">from</span> <span style=\"background-color: #fff0f0\">\"./App\"</span>;\n\nconst rootElement <span style=\"color: #333333\">=</span> document.getElementById(<span style=\"background-color: #fff0f0\">\"root\"</span>);\nReactDOM.render(\n <span style=\"color: #333333\">&lt;</span>React.StrictMode<span style=\"color: #333333\">&gt;</span>\n   <span style=\"color: #333333\">&lt;</span>App <span style=\"color: #333333\">/&gt;</span>\n <span style=\"color: #333333\">&lt;/</span>React.StrictMode<span style=\"color: #333333\">&gt;</span>,\n rootElement\n);\n</pre></div>\n    <br>\n    StrictMode currently helps with the following issues:\n    <ul class=\"list-text\">\n      <li>\n        <b>Identifying components with unsafe lifecycle methods</b>\n        <br>\n        Certain lifecycle methods are unsafe to use in asynchronous react applications. With the use of third-party libraries it becomes difficult to ensure that certain lifecycle methods are not used. \n        <br>\n        StrictMode helps in providing us a warning if any of the class components uses an unsafe lifecycle method.\n      </li>\n      <br>\n      <li>\n        <b>Warning about the usage of legacy string API</b>\n        <br>\n        If one is using an older version of React, <b>callback ref</b> is the recommended way to manage <b>refs</b> instead of using the <b>string refs</b>. StrictMode gives a warning if we are using <b>string refs</b> to manage refs. \n      </li>\n      <br>\n      <li>\n        <b>Warning about the usage of findDOMNode</b>\n        <br>\n        Previously, findDOMNode( ) method was used to search the tree of a DOM node. This method is deprecated in React. Hence, the StrictMode gives us a warning about the usage of this method.\n      </li>\n      <li>\n        Warning about the usage of legacy context API (because the API is error-prone)\n      </li>\n    </ul>\n    <br><br>\n  </div>",
    "tags": [
      "STRICT"
    ]
  },
  {
    "text": "How to prevent re-renders in React?",
    "source": "https://www.interviewbit.com/react-interview-questions/",
    "answer": "<div>\n    <b>Reason for re-renders in React:</b>\n    <br>\n    Re-rendering of a component and it’s child components occur when props or state of the component has been changed. \n    <br>\n    Re-rendering components that are not updated, affects the performance of an application. \n    <br><br>\n    <b>How to prevent re-rendering:</b>\n    <br>\n    Consider the following components: \n    <br>\n    <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #007020\">class</span> <span style=\"color: #008800; font-weight: bold\">Parent</span> extends React.Component {\n state <span style=\"color: #333333\">=</span> { messageDisplayed: <span style=\"color: #008800; font-weight: bold\">false</span> };\n componentDidMount() {\n   this.setState({ messageDisplayed: <span style=\"color: #008800; font-weight: bold\">true</span> });\n }\n\n <span style=\"color: #007020\">render</span>() {\n   console.log(<span style=\"background-color: #fff0f0\">\"Parent is getting rendered\"</span>);\n   <span style=\"color: #008800; font-weight: bold\">return</span> (\n     <span style=\"color: #333333\">&lt;</span><span style=\"color: #007020\">div</span> className<span style=\"color: #333333\">=</span><span style=\"background-color: #fff0f0\">\"App\"</span><span style=\"color: #333333\">&gt;</span>\n       <span style=\"color: #333333\">&lt;</span>Message <span style=\"color: #333333\">/&gt;</span>\n     <span style=\"color: #333333\">&lt;/</span><span style=\"color: #007020\">div</span><span style=\"color: #333333\">&gt;</span>\n   );\n }\n}\n\n<span style=\"color: #007020\">class</span> Message extends React.Component {\n constructor(props) {\n   super(props);\n   this.state <span style=\"color: #333333\">=</span> { message: <span style=\"background-color: #fff0f0\">\"Hello, this is vivek\"</span> };\n }  \n <span style=\"color: #007020\">render</span>() {\n   console.log(<span style=\"background-color: #fff0f0\">\"Message is getting rendered\"</span>);\n   <span style=\"color: #008800; font-weight: bold\">return</span> (\n     <span style=\"color: #333333\">&lt;</span><span style=\"color: #007020\">div</span><span style=\"color: #333333\">&gt;</span>\n       <span style=\"color: #333333\">&lt;</span>p<span style=\"color: #333333\">&gt;</span>{this.state.message}<span style=\"color: #333333\">&lt;/</span>p<span style=\"color: #333333\">&gt;</span>\n     <span style=\"color: #333333\">&lt;/</span><span style=\"color: #007020\">div</span><span style=\"color: #333333\">&gt;</span>\n   );\n }\n}\n</pre></div>\n    <br>\n    <b>Parent</b> component is the parent component and <b>Message</b> is the child component. Any change in the parent component will lead to re-rendering of the child component as well. \n    <br>\n    To prevent the re-rendering of child component, we use the shouldComponentUpdate( ) method:\n    <br><br>\n    <b>**Note- Use shouldComponentUpdate( ) method only when you are sure that it’s a static component.</b>\n    <br>\n    <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #007020\">class</span> Message extends React.Component {\n constructor(props) {\n   super(props);\n   this.state <span style=\"color: #333333\">=</span> { message: <span style=\"background-color: #fff0f0\">\"Hello, this is vivek\"</span> };\n }\n shouldComponentUpdate() {\n   console.log(<span style=\"background-color: #fff0f0\">\"Does not get rendered\"</span>);\n   <span style=\"color: #008800; font-weight: bold\">return</span> <span style=\"color: #008800; font-weight: bold\">false</span>;\n }\n <span style=\"color: #007020\">render</span>() {\n   console.log(<span style=\"background-color: #fff0f0\">\"Message is getting rendered\"</span>);\n   <span style=\"color: #008800; font-weight: bold\">return</span> (\n     <span style=\"color: #333333\">&lt;</span><span style=\"color: #007020\">div</span><span style=\"color: #333333\">&gt;</span>\n       <span style=\"color: #333333\">&lt;</span>p<span style=\"color: #333333\">&gt;</span>{this.state.message}<span style=\"color: #333333\">&lt;/</span>p<span style=\"color: #333333\">&gt;</span>\n     <span style=\"color: #333333\">&lt;/</span><span style=\"color: #007020\">div</span><span style=\"color: #333333\">&gt;</span>\n   );\n }\n}\n</pre></div>\n    <br>\n    As one can see in the code above, we have returned <b>false</b> from the shouldComponentUpdate( ) method, which prevents the child component from re-rendering. \n    <br><br>\n  </div>",
    "tags": [
      "RENDER"
    ]
  },
  {
    "text": "Explain React state and props.",
    "source": "https://www.interviewbit.com/react-interview-questions/",
    "answer": "<div>\n    <table>\n      <tbody><tr>\n        <th> Props </th>\n        <th> State </th>\n      </tr>\n      <tr>\n        <td> Immutable </td>\n        <td> Owned by its component </td>\n      </tr>\n      <tr>\n        <td> Has better performance </td>\n        <td> Locally scoped </td>\n      </tr>\n      <tr>\n        <td> Can be passed to child components </td>\n        <td> Witeable/Mutable </td>\n      </tr>\n      <tr>\n        <td>  </td>\n        <td> has setState() method to modify properties </td>\n      </tr>\n      <tr>\n        <td>  </td>\n        <td> Changes to state can be asynchronous </td>\n      </tr>\n      <tr>\n        <td>  </td>\n        <td> can only be passed as props </td>\n      </tr>\n    </tbody></table>\n    <b>React State</b>\n    <br>\n    Every component in react has a built-in <b>state</b> object, which contains all the property values that belong to that component. \n    <br>\n    In other words, <b>the state object</b> controls the behaviour of a component. Any change in the property values of the state object leads to re-rendering of the component.\n    <br><br>\n    <b>**Note- State object is not available in functional components but, we can use React Hooks to add state to a functional component.</b>\n    <br><br>\n    <b>How to declare a state object?</b>\n    <br>\n    Example:\n    <br>\n    <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #008800; font-weight: bold\">class</span> Car <span style=\"color: #008800; font-weight: bold\">extends</span> React.Component{\n constructor(props){\n   <span style=\"color: #008800; font-weight: bold\">super</span>(props);\n   <span style=\"color: #008800; font-weight: bold\">this</span>.<span style=\"color: #996633\">state = </span>{\n     <span style=\"color: #996633\">brand: </span><span style=\"background-color: #fff0f0\">\"BMW\"</span>,\n     <span style=\"color: #996633\">color: </span><span style=\"background-color: #fff0f0\">\"black\"</span>\n   }\n }\n}\n</pre></div>\n    <br>\n    <b>How to use and update the state object?</b>\n    <br>\n    <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #008800; font-weight: bold\">class</span> Car <span style=\"color: #008800; font-weight: bold\">extends</span> React.Component {\n constructor(props) {\n   <span style=\"color: #008800; font-weight: bold\">super</span>(props);\n   <span style=\"color: #008800; font-weight: bold\">this</span>.<span style=\"color: #996633\">state = </span>{\n     <span style=\"color: #996633\">brand: </span><span style=\"background-color: #fff0f0\">\"BMW\"</span>,\n     <span style=\"color: #996633\">color: </span><span style=\"background-color: #fff0f0\">\"Black\"</span>\n   };\n }\n\n changeColor() {\n   <span style=\"color: #008800; font-weight: bold\">this</span>.setState(prevState <span style=\"color: #333333\">=&gt;</span> {\n     <span style=\"color: #008800; font-weight: bold\">return</span> { <span style=\"color: #996633\">color: </span><span style=\"background-color: #fff0f0\">\"Red\"</span> };\n   });\n }\n\n render() {\n   <span style=\"color: #008800; font-weight: bold\">return</span> (\n     <span style=\"color: #333333\">&lt;</span>div<span style=\"color: #333333\">&gt;</span>\n       <span style=\"color: #333333\">&lt;</span>button onClick<span style=\"color: #333333\">=</span>{() <span style=\"color: #333333\">=&gt;</span> <span style=\"color: #008800; font-weight: bold\">this</span>.changeColor()}<span style=\"color: #333333\">&gt;</span>Change Color<span style=\"color: #333333\">&lt;/</span>button<span style=\"color: #333333\">&gt;</span>\n       <span style=\"color: #333333\">&lt;</span>p<span style=\"color: #333333\">&gt;</span>{<span style=\"color: #008800; font-weight: bold\">this</span>.state.color}<span style=\"color: #333333\">&lt;/</span>p<span style=\"color: #333333\">&gt;</span>\n     <span style=\"color: #333333\">&lt;/</span>div<span style=\"color: #333333\">&gt;</span>\n   );\n }\n}\n</pre></div>\n    <br>\n    As one can see in the code above, we can use the state by calling <b>this.state.propertyName</b> and we can change the state object property using <b>setState</b> method.\n    <br>\n    <b>React Props</b>\n    <br>\n    Every react component, accepts a single object argument called <b>props</b> (which stands for “properties”). \n    <br>\n    These props can be passed to a component using HTML attributes and the component accepts these props as an argument.\n    <br>\n    Using props, we can pass data from one component to another. \n    <br>\n    Passing props to a component: \n    <br>\n    While rendering a component, we can pass the props as a HTML attribute: \n    <br>\n    <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #007700\">&lt;Car</span> <span style=\"color: #0000CC\">brand=</span><span style=\"background-color: #fff0f0\">\"Mercedes\"</span><span style=\"color: #007700\">/&gt;</span>\n</pre></div>\n    <br>\n    The component receives the props: \n    <br>\n    In Class component: \n    <br>\n    <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #008800; font-weight: bold\">class</span> Car <span style=\"color: #008800; font-weight: bold\">extends</span> React.Component {\n constructor(props) {\n   <span style=\"color: #008800; font-weight: bold\">super</span>(props);\n   <span style=\"color: #008800; font-weight: bold\">this</span>.<span style=\"color: #996633\">state = </span>{\n     <span style=\"color: #996633\">brand: </span><span style=\"color: #008800; font-weight: bold\">this</span>.props.brand,\n     <span style=\"color: #996633\">color: </span><span style=\"background-color: #fff0f0\">\"Black\"</span>\n   };\n }\n}\n</pre></div>\n    <br>\n    In Functional component:\n    <br>\n    <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #008800; font-weight: bold\">function</span> Car(props) {\n <span style=\"color: #008800; font-weight: bold\">let</span> [brand, setBrand] <span style=\"color: #333333\">=</span> useState(props.brand);\n}\n</pre></div>\n    <br>\n    <b>****Note- Props are read-only. They cannot be manipulated or changed inside a component.</b>\n    <br><br>\n  </div>",
    "tags": [
      "STATE", "PROPS"
    ]
  },


  {
    "text": "Explain React Hooks. ",
    "source": "https://www.interviewbit.com/react-interview-questions/",
    "answer": "<div>\n    <b>What are Hooks?</b>\n    Hooks are functions that let us “hook into” React state and lifecycle features from <b>a functional component</b>.\n    <br>\n    React Hooks <b>cannot</b> be used in class components. They let us write components without class. \n    <br><br>\n    <b>Why were Hooks introduced in React?</b>\n    <br>\n    React hooks were introduced in the 16.8 version of React. \n    <br>\n    Previously, functional components were called stateless components. Only class components were used for state management and lifecycle methods. \n    <br>\n    The need to change a functional component to a class component, whenever state management or lifecycle methods were to be used, led to the development of Hooks.\n    <br>\n    <b>Example of a hook:</b>\n    <br>\n    <b>useState hook:</b>\n    <br>\n    In functional components, useState hook lets us define state for a component:\n    <br>\n    <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #008800; font-weight: bold\">function</span> Person(props) {\n <span style=\"color: #888888\">// We are declaring a state variable called name.</span>\n <span style=\"color: #888888\">// setName is a function to update/change the value of name</span>\n <span style=\"color: #008800; font-weight: bold\">let</span> [name, setName] <span style=\"color: #333333\">=</span> useState(<span style=\"background-color: #fff0f0\">''</span>);\n}\n</pre></div>\n    <br>\n    The state variable “name” can be directly used inside the HTML. \n    <br><br>\n  </div>",
    "tags": [
      "HOOKS"
    ]
  },
  {
    "text": "What are the different ways to style a React component?",
    "source": "https://www.interviewbit.com/react-interview-questions/",
    "answer": "<div>\n    There are many different ways through which one can style a React component. Some of the ways are :\n    <ul class=\"list-text\">\n      <li>\n        <b>Inline Styling</b>\n        <br>\n        We can directly style an element using inline style attributes. \n        <br>\n        Make sure the value of style is a JavaScript object:\n        <br>\n        <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #007020\">class</span> RandomComponent extends React.Component {\n <span style=\"color: #007020\">render</span>() {\n   <span style=\"color: #008800; font-weight: bold\">return</span> (\n     <span style=\"color: #333333\">&lt;</span><span style=\"color: #007020\">div</span><span style=\"color: #333333\">&gt;</span>\n       <span style=\"color: #333333\">&lt;</span>h3 style<span style=\"color: #333333\">=</span>{{ color: <span style=\"background-color: #fff0f0\">\"Yellow\"</span> }}<span style=\"color: #333333\">&gt;</span>This is a heading<span style=\"color: #333333\">&lt;/</span>h3<span style=\"color: #333333\">&gt;</span>\n       <span style=\"color: #333333\">&lt;</span>p style<span style=\"color: #333333\">=</span>{{ fontSize: <span style=\"background-color: #fff0f0\">\"32px\"</span> }}<span style=\"color: #333333\">&gt;</span>This is a paragraph<span style=\"color: #333333\">&lt;/</span>p<span style=\"color: #333333\">&gt;</span>\n     <span style=\"color: #333333\">&lt;/</span><span style=\"color: #007020\">div</span><span style=\"color: #333333\">&gt;</span>\n   );\n }\n}\n</pre></div>\n      </li>\n      <li>\n        <b>Using JavaScript object</b>\n        <br>\n        We can create a separate JavaScript object and set the desired style properties.\n        <br>\n        This object can be used as the value of the inline style attribute.\n        <br>\n        <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #007020\">class</span> RandomComponent extends React.Component {\n paragraphStyles <span style=\"color: #333333\">=</span> {\n   color: <span style=\"background-color: #fff0f0\">\"Red\"</span>,\n   fontSize: <span style=\"background-color: #fff0f0\">\"32px\"</span>\n };\n\n headingStyles <span style=\"color: #333333\">=</span> {\n   color: <span style=\"background-color: #fff0f0\">\"blue\"</span>,\n   fontSize: <span style=\"background-color: #fff0f0\">\"48px\"</span>\n };\n\n <span style=\"color: #007020\">render</span>() {\n   <span style=\"color: #008800; font-weight: bold\">return</span> (\n     <span style=\"color: #333333\">&lt;</span><span style=\"color: #007020\">div</span><span style=\"color: #333333\">&gt;</span>\n       <span style=\"color: #333333\">&lt;</span>h3 style<span style=\"color: #333333\">=</span>{this.headingStyles}<span style=\"color: #333333\">&gt;</span>This is a heading<span style=\"color: #333333\">&lt;/</span>h3<span style=\"color: #333333\">&gt;</span>\n       <span style=\"color: #333333\">&lt;</span>p style<span style=\"color: #333333\">=</span>{this.paragraphStyles}<span style=\"color: #333333\">&gt;</span>This is a paragraph<span style=\"color: #333333\">&lt;/</span>p<span style=\"color: #333333\">&gt;</span>\n     <span style=\"color: #333333\">&lt;/</span><span style=\"color: #007020\">div</span><span style=\"color: #333333\">&gt;</span>\n   );\n }\n}\n</pre></div>\n      </li>\n      <li>\n        <b>CSS Stylesheet</b>\n        <br>\n        We can create a separate CSS file and write all the styles for the component inside that file. This file needs to be imported inside the component file.\n        <br>\n        <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #008800; font-weight: bold\">import</span> <span style=\"background-color: #fff0f0\">'./RandomComponent.css'</span>;\n\n<span style=\"color: #007020\">class</span> RandomComponent extends React.Component {\n <span style=\"color: #007020\">render</span>() {\n   <span style=\"color: #008800; font-weight: bold\">return</span> (\n     <span style=\"color: #333333\">&lt;</span><span style=\"color: #007020\">div</span><span style=\"color: #333333\">&gt;</span>\n       <span style=\"color: #333333\">&lt;</span>h3 className<span style=\"color: #333333\">=</span><span style=\"background-color: #fff0f0\">\"heading\"</span><span style=\"color: #333333\">&gt;</span>This is a heading<span style=\"color: #333333\">&lt;/</span>h3<span style=\"color: #333333\">&gt;</span>\n       <span style=\"color: #333333\">&lt;</span>p className<span style=\"color: #333333\">=</span><span style=\"background-color: #fff0f0\">\"paragraph\"</span><span style=\"color: #333333\">&gt;</span>This is a paragraph<span style=\"color: #333333\">&lt;/</span>p<span style=\"color: #333333\">&gt;</span>\n     <span style=\"color: #333333\">&lt;/</span><span style=\"color: #007020\">div</span><span style=\"color: #333333\">&gt;</span>\n   );\n }\n}\n</pre></div>\n      </li>\n      <li>\n        <b>CSS Modules</b>\n        <br>\n        We can create a separate CSS module and import this module inside our component. \n        Create a file with “.module.css”‘ extension, \n        <br>\n        styles.module.css:\n        <br>\n        <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #BB0066; font-weight: bold\">.paragraph</span>{\n <span style=\"color: #008800; font-weight: bold\">color</span><span style=\"color: #333333\">:</span><span style=\"background-color: #fff0f0\">\"red\"</span>;\n <span style=\"color: #008800; font-weight: bold\">border</span><span style=\"color: #333333\">:</span><span style=\"color: #6600EE; font-weight: bold\">1px</span> <span style=\"color: #008800; font-weight: bold\">solid</span> <span style=\"color: #007020\">black</span>;\n}\n</pre></div>\n        <br>\n        We can import this file inside the component and use it:\n        <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\">import styles from  './styles.module.css';\n\nclass RandomComponent extends React.Component <span style=\"color: #557799\">{</span>\n <span style=\"color: #0000CC\">render</span><span style=\"color: #333333\">()</span> <span style=\"color: #333333\">{</span>\n   <span style=\"color: #0000CC\">return</span> <span style=\"color: #333333\">(</span>\n     <span style=\"color: #333333\">&lt;</span><span style=\"color: #0000CC\">div</span><span style=\"color: #333333\">&gt;</span>\n       <span style=\"color: #333333\">&lt;</span><span style=\"color: #0000CC\">h3</span> <span style=\"color: #0000CC\">className</span><span style=\"color: #333333\">=</span><span style=\"background-color: #fff0f0\">\"heading\"</span><span style=\"color: #333333\">&gt;</span><span style=\"color: #0000CC\">This</span> <span style=\"color: #0000CC\">is</span> <span style=\"color: #0000CC\">a</span> <span style=\"color: #0000CC\">heading</span><span style=\"color: #333333\">&lt;/</span><span style=\"color: #0000CC\">h3</span><span style=\"color: #333333\">&gt;</span>\n       <span style=\"color: #333333\">&lt;</span><span style=\"color: #0000CC\">p</span> <span style=\"color: #0000CC\">className</span><span style=\"color: #333333\">={</span><span style=\"color: #0000CC\">styles</span><span style=\"color: #333333\">.</span><span style=\"color: #0000CC\">paragraph</span><span style=\"color: #557799\">}</span> &gt;This is a paragraph<span style=\"color: #007700\">&lt;/p&gt;</span>\n     <span style=\"color: #007700\">&lt;/div&gt;</span>\n   );\n }\n}\n</pre></div>\n      </li>\n    </ul>\n    <br><br>\n  </div>",
    "tags": [
      "STYLE"
    ]
  },
  {
    "text": "Name a few techniques to optimize React app performance.",
    "source": "https://www.interviewbit.com/react-interview-questions/",
    "answer": "<div>\n    There are many ways through which one can optimize the performance of a React app, let’s have a look at some of them:\n    <br><br>\n    <ul class=\"list-text\">\n      <li>\n        <b>Using useMemo( ) - </b>\n        <br>\n        It is a React hook that is used for caching CPU-Expensive functions. \n        <br>\n        Sometimes in a React app, a CPU-Expensive function gets called repeatedly due to re-renders of a component, which can lead to slow rendering. \n        <br>\n        useMemo( ) hook can be used to cache such functions. By using useMemo( ), the CPU-Expensive function gets called only when it is needed.\n        <br><br>\n      </li>\n      <li>\n        <b>Using React.PureComponent - </b>\n        <br>\n        It is a base component class that checks state and props of a component to know whether the component should be updated. \n        <br>\n        Instead of using the simple React.Component, we can use React.PureComponent to reduce the re-renders of a component unnecessarily.\n        <br><br>\n      </li>\n      <li>\n        <b>Maintaining State Colocation -</b>\n        <br>\n        This is a process of moving the state as close to where you need it as possible. \n        <br>\n        Sometimes in React app, we have a lot of unnecessary states inside the parent component which makes the code less readable and harder to maintain. Not to forget, having many states inside a single component leads to unnecessary re-renders for the component. \n        <br>\n        It is better to shift states which are less valuable to the parent component, to a separate component.\n        <br><br>\n      </li>\n      <li>\n        <b>Lazy Loading - </b>\n        <br>\n        It is a technique used to reduce the load time of a React app. Lazy loading helps reduce the risk of web app performances to minimal.\n      </li>\n    </ul>\n    <br><br>\n  </div>",
    "tags": [
      "PERFORMANCE"
    ]
  },
  {
    "text": "What are keys in React?",
    "source": "https://www.interviewbit.com/react-interview-questions/",
    "answer": "<div>\n    <center><img src=\"https://assets.interviewbit.com/assets/skill_interview_questions/react/react-way-66f68fa8d80b677f487c70ee5e804ecaa70e0f78f63e1543a103ac56ed6e028e.png.gz\" width=\"900px;\"></center>\n    A key is a special string attribute that needs to be included when using lists of elements.\n    <br>\n    Example of a list using key:\n    <br>\n    <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\">const <span style=\"color: #996633\">ids = </span>[<span style=\"color: #0000DD; font-weight: bold\">1</span>,<span style=\"color: #0000DD; font-weight: bold\">2</span>,<span style=\"color: #0000DD; font-weight: bold\">3</span>,<span style=\"color: #0000DD; font-weight: bold\">4</span>,<span style=\"color: #0000DD; font-weight: bold\">5</span>];\nconst <span style=\"color: #996633\">listElements = </span>ids.map(<span style=\"color: #0066BB; font-weight: bold\">(id)=&gt;</span>{\n <span style=\"color: #008800; font-weight: bold\">return</span>(\n <span style=\"color: #333333\">&lt;</span>li key<span style=\"color: #333333\">=</span>{id.toString()}<span style=\"color: #333333\">&gt;</span>\n   {id}\n <span style=\"color: #333333\">&lt;/</span>li<span style=\"color: #333333\">&gt;</span>\n )\n})\n</pre></div>\n    <br>\n    <b>Importance of keys</b>\n    <br>\n    Keys help react identify which elements were added, changed or removed. \n    <br>\n    Keys should be given to array elements for providing a unique identity for each element.\n    <br>\n    Without keys, React does not understand the order or uniqueness of each element. \n    <br>\n    With keys, React has an idea of which particular element was deleted,edited, and added.\n    <br>\n    Keys are generally used for displaying a list of data coming from an API.\n    <br>\n    <b>***Note- Keys used within arrays should be unique among siblings. They need not be globally unique. </b>\n    <br><br>\n  </div>",
    "tags": [
      "KEYS"
    ]
  },
  {
    "text": "How to pass data between react components? ",
    "source": "https://www.interviewbit.com/react-interview-questions/",
    "answer": "<div>\n    <center><img src=\"https://assets.interviewbit.com/assets/skill_interview_questions/react/parent-child-08a78d11384e8648988c4ef517f35c68c344bf35c29c90f5d518b41c756193d6.png.gz\" width=\"900px;\"></center>\n    <b>Parent Component to Child Component (using props)</b>\n    <br>\n    With the help of props, we can send data from a parent to a child component.\n    <br>\n    How do we do this?\n    <br><br>\n    Consider the following Parent Component:\n    <br>\n    <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\">import ChildComponent from <span style=\"background-color: #fff0f0\">\"./Child\"</span>;\n\n    function ParentComponent(props) {\n     let [counter, setCounter] <span style=\"color: #333333\">=</span> useState(<span style=\"color: #0000DD; font-weight: bold\">0</span>);\n    \n     let <span style=\"color: #996633\">increment = </span>() <span style=\"color: #333333\">=&gt;</span> setCounter(<span style=\"color: #333333\">++</span>counter);\n    \n     <span style=\"color: #008800; font-weight: bold\">return</span> (\n       <span style=\"color: #333333\">&lt;</span>div<span style=\"color: #333333\">&gt;</span>\n         <span style=\"color: #333333\">&lt;</span>button onClick<span style=\"color: #333333\">=</span>{increment}<span style=\"color: #333333\">&gt;</span>Increment Counter<span style=\"color: #333333\">&lt;/</span>button<span style=\"color: #333333\">&gt;</span>\n         <span style=\"color: #333333\">&lt;</span>ChildComponent counterValue<span style=\"color: #333333\">=</span>{counter} <span style=\"color: #333333\">/&gt;</span>\n       <span style=\"color: #333333\">&lt;/</span>div<span style=\"color: #333333\">&gt;</span>\n     );\n    }\n    </pre></div>    \n      <br>\n      As one can see in the code above, we are rendering the child component inside the parent component, by providing a prop called counterValue. Value of the counter is being passed from the parent to the child component. \n      <br>\n      We can use the data passed by the parent component in the following way:\n      <br>\n      <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\">function ChildComponent(props) {\n <span style=\"color: #008800; font-weight: bold\">return</span> (\n   <span style=\"color: #333333\">&lt;</span>div<span style=\"color: #333333\">&gt;</span>\n     <span style=\"color: #333333\">&lt;</span>p<span style=\"color: #333333\">&gt;</span>Value <span style=\"color: #008800; font-weight: bold\">of</span> <span style=\"color: #996633\">counter: </span>{props.counterValue}<span style=\"color: #333333\">&lt;/</span>p<span style=\"color: #333333\">&gt;</span>\n   <span style=\"color: #333333\">&lt;/</span>div<span style=\"color: #333333\">&gt;</span>\n );\n}\n</pre></div>\n    <br>\n    We use the <b>props.counterValue</b> to display the data passed on by the parent component.\n    <br>\n    <b>Child Component to Parent Component (using callbacks)</b>\n    <br>\n    This one is a bit tricky. We follow the steps below:\n    <ul class=\"list-text\">\n      <li>\n        Create a callback in the parent component which takes in the data needed as a parameter.\n      </li>\n      <li>\n        Pass this callback as a prop to the child component. \n      </li>\n      <li>\n        Send data from the child component using the callback.\n      </li>\n    </ul>\n    We are considering the same example above but in this case, we are going to pass the updated <b>counterValue</b> from child to parent.\n    <br>\n    <b>Step1 and Step2</b>: Create a callback in the parent component, pass this callback as a prop.\n    <br>\n    <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\">function ParentComponent(props) {\n let [counter, setCounter] <span style=\"color: #333333\">=</span> useState(<span style=\"color: #0000DD; font-weight: bold\">0</span>);\n\n let <span style=\"color: #996633\">callback = </span>valueFromChild <span style=\"color: #333333\">=&gt;</span> setCounter(valueFromChild);\n\n <span style=\"color: #008800; font-weight: bold\">return</span> (\n   <span style=\"color: #333333\">&lt;</span>div<span style=\"color: #333333\">&gt;</span>\n     <span style=\"color: #333333\">&lt;</span>p<span style=\"color: #333333\">&gt;</span>Value <span style=\"color: #008800; font-weight: bold\">of</span> <span style=\"color: #996633\">counter: </span>{counter}<span style=\"color: #333333\">&lt;/</span>p<span style=\"color: #333333\">&gt;</span>\n     <span style=\"color: #333333\">&lt;</span>ChildComponent callbackFunc<span style=\"color: #333333\">=</span>{callback} counterValue<span style=\"color: #333333\">=</span>{counter} <span style=\"color: #333333\">/&gt;</span>\n   <span style=\"color: #333333\">&lt;/</span>div<span style=\"color: #333333\">&gt;</span>\n );\n}\n</pre></div>\n    <br>\n    As one can see in the code above, we created a function called <b>callback</b> which takes in the data received from the child component as a parameter. \n    <br>\n    Next, we passed the function <b>callback</b> as a prop to the child component.\n    <br>\n    <b>Step3</b>: Pass data from child to the parent component.\n    <br>\n    <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\">function ChildComponent(props) {\n let <span style=\"color: #996633\">childCounterValue = </span>props.counterValue;\n\n <span style=\"color: #008800; font-weight: bold\">return</span> (\n   <span style=\"color: #333333\">&lt;</span>div<span style=\"color: #333333\">&gt;</span>\n     <span style=\"color: #333333\">&lt;</span>button onClick<span style=\"color: #333333\">=</span>{() <span style=\"color: #333333\">=&gt;</span> props.callbackFunc(<span style=\"color: #333333\">++</span>childCounterValue)}<span style=\"color: #333333\">&gt;</span>\n       Increment Counter\n     <span style=\"color: #333333\">&lt;/</span>button<span style=\"color: #333333\">&gt;</span>\n   <span style=\"color: #333333\">&lt;/</span>div<span style=\"color: #333333\">&gt;</span>\n );\n}\n</pre></div>\n    <br>\n    In the code above, we have used the <b>props.counterValue</b> and set it to a variable called <b>childCounterValue</b>.\n    <br>\n    Next, on button click, we pass the incremented childCounterValue to the <b>props.callbackFunc</b>. \n    <br>\n    This way, we can pass data from the child to the parent component. \n    <br><br>\n  <div>\n\n  <h3 id=\"react-hoc\"> 15. What are Higher Order Components? </h3>\n  <div>\n    Simply put, Higher Order Component(HOC) is a function that takes in a component and returns a new component. \n    <br><br>\n    <center><img src=\"https://assets.interviewbit.com/assets/skill_interview_questions/react/component-higher-component-2bf94eac9671642e9b8419ee520cf77a4184bb29394cb897fd1e9872c9d7e2c8.png.gz\" width=\"900px;\"></center>\n    <b>When do we need a Higher Order Component?</b>\n    <br>\n    While developing React applications, we might develop components that are quite similar to each other with minute differences. \n    <br>\n    In most cases, developing similar components might not be an issue but, while developing larger applications we need to keep our code <b>DRY</b>, therefore, we want an <b>abstraction</b> that allows us to define this logic in a single place and share it across components. \n    <br>\n    HOC allows us to create that abstraction. \n    <br>\n    Example of a HOC:\n    <br>\n    Consider the following components having similar functionality\n    <br>\n    The following component displays the list of articles:\n    <br>\n<div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #888888\">// \"GlobalDataSource\" is some global data source</span>\n<span style=\"color: #008800; font-weight: bold\">class</span> ArticlesList <span style=\"color: #008800; font-weight: bold\">extends</span> React.Component {\n  constructor(props) {\n    <span style=\"color: #008800; font-weight: bold\">super</span>(props);\n    <span style=\"color: #008800; font-weight: bold\">this</span>.handleChange <span style=\"color: #333333\">=</span> <span style=\"color: #008800; font-weight: bold\">this</span>.handleChange.bind(<span style=\"color: #008800; font-weight: bold\">this</span>);\n    <span style=\"color: #008800; font-weight: bold\">this</span>.state <span style=\"color: #333333\">=</span> {\n      articles<span style=\"color: #333333\">:</span> GlobalDataSource.getArticles(),\n    };\n  }\n\n  componentDidMount() {\n    <span style=\"color: #888888\">// Listens to the changes added</span>\n    GlobalDataSource.addChangeListener(<span style=\"color: #008800; font-weight: bold\">this</span>.handleChange);\n  }\n\n  componentWillUnmount() {\n    <span style=\"color: #888888\">// Listens to the changes removed</span>\n    GlobalDataSource.removeChangeListener(<span style=\"color: #008800; font-weight: bold\">this</span>.handleChange);\n  }\n\n  handleChange() {\n    <span style=\"color: #888888\">// States gets Update whenver data source changes</span>\n    <span style=\"color: #008800; font-weight: bold\">this</span>.setState({\n      articles<span style=\"color: #333333\">:</span> GlobalDataSource.getArticles(),\n    });\n  }\n\n  render() {\n    <span style=\"color: #008800; font-weight: bold\">return</span> (\n      <span style=\"color: #333333\">&lt;</span>div<span style=\"color: #333333\">&gt;</span>\n        {<span style=\"color: #008800; font-weight: bold\">this</span>.state.articles.map((article) <span style=\"color: #333333\">=&gt;</span> (\n          <span style=\"color: #333333\">&lt;</span>ArticleData article<span style=\"color: #333333\">=</span>{article} key<span style=\"color: #333333\">=</span>{article.id} <span style=\"color: #333333\">/&gt;</span>\n        ))}\n      <span style=\"color: #333333\">&lt;</span>/div<span style=\"color: #333333\">&gt;</span>\n    );\n  }\n}\n</pre>\n</div>\n    <br>\n    The following component displays the list of users:\n    <br>\n<div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #888888\">// \"GlobalDataSource\" is some global data source</span>\n<span style=\"color: #008800; font-weight: bold\">class</span> UsersList <span style=\"color: #008800; font-weight: bold\">extends</span> React.Component {\n  constructor(props) {\n    <span style=\"color: #008800; font-weight: bold\">super</span>(props);\n    <span style=\"color: #008800; font-weight: bold\">this</span>.handleChange <span style=\"color: #333333\">=</span> <span style=\"color: #008800; font-weight: bold\">this</span>.handleChange.bind(<span style=\"color: #008800; font-weight: bold\">this</span>);\n    <span style=\"color: #008800; font-weight: bold\">this</span>.state <span style=\"color: #333333\">=</span> {\n      users<span style=\"color: #333333\">:</span> GlobalDataSource.getUsers(),\n    };\n  }\n\n  componentDidMount() {\n    <span style=\"color: #888888\">// Listens to the changes added</span>\n    GlobalDataSource.addChangeListener(<span style=\"color: #008800; font-weight: bold\">this</span>.handleChange);\n  }\n\n  componentWillUnmount() {\n    <span style=\"color: #888888\">// Listens to the changes removed</span>\n    GlobalDataSource.removeChangeListener(<span style=\"color: #008800; font-weight: bold\">this</span>.handleChange);\n  }\n\n  handleChange() {\n    <span style=\"color: #888888\">// States gets Update whenver data source changes</span>\n    <span style=\"color: #008800; font-weight: bold\">this</span>.setState({\n      users<span style=\"color: #333333\">:</span> GlobalDataSource.getUsers(),\n    });\n  }\n\n  render() {\n    <span style=\"color: #008800; font-weight: bold\">return</span> (\n      <span style=\"color: #333333\">&lt;</span>div<span style=\"color: #333333\">&gt;</span>\n        {<span style=\"color: #008800; font-weight: bold\">this</span>.state.users.map((user) <span style=\"color: #333333\">=&gt;</span> (\n          <span style=\"color: #333333\">&lt;</span>UserData user<span style=\"color: #333333\">=</span>{user} key<span style=\"color: #333333\">=</span>{user.id} <span style=\"color: #333333\">/&gt;</span>\n        ))}\n      <span style=\"color: #333333\">&lt;/</span>div<span style=\"color: #333333\">&gt;</span>\n    );\n  }\n}\n</pre></div>\n    <br>\n    Notice the above components, both have similar functionality but, they are calling different methods to an API endpoint. \n    <br>\n    Let’s create a Higher Order Component to create an abstraction:\n    <br>\n<div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #888888\">// Higher Order Component which takes a component</span>\n<span style=\"color: #888888\">// as input and returns another component</span>\n<span style=\"color: #888888\">// \"GlobalDataSource\" is some global data source</span>\n<span style=\"color: #008800; font-weight: bold\">function</span> HOC(WrappedComponent, selectData) {\n  <span style=\"color: #008800; font-weight: bold\">return</span> <span style=\"color: #008800; font-weight: bold\">class</span> <span style=\"color: #008800; font-weight: bold\">extends</span> React.Component {\n    constructor(props) {\n      <span style=\"color: #008800; font-weight: bold\">super</span>(props);\n      <span style=\"color: #008800; font-weight: bold\">this</span>.handleChange <span style=\"color: #333333\">=</span> <span style=\"color: #008800; font-weight: bold\">this</span>.handleChange.bind(<span style=\"color: #008800; font-weight: bold\">this</span>);\n      <span style=\"color: #008800; font-weight: bold\">this</span>.state <span style=\"color: #333333\">=</span> {\n        data<span style=\"color: #333333\">:</span> selectData(GlobalDataSource, props),\n      };\n    }\n\n    componentDidMount() {\n      <span style=\"color: #888888\">// Listens to the changes added</span>\n      GlobalDataSource.addChangeListener(<span style=\"color: #008800; font-weight: bold\">this</span>.handleChange);\n    }\n\n    componentWillUnmount() {\n      <span style=\"color: #888888\">// Listens to the changes removed</span>\n      GlobalDataSource.removeChangeListener(<span style=\"color: #008800; font-weight: bold\">this</span>.handleChange);\n    }\n\n    handleChange() {\n      <span style=\"color: #008800; font-weight: bold\">this</span>.setState({\n        data<span style=\"color: #333333\">:</span> selectData(GlobalDataSource, <span style=\"color: #008800; font-weight: bold\">this</span>.props),\n      });\n    }\n\n    render() {\n      <span style=\"color: #888888\">// Rendering the wrapped component with the latest data data</span>\n      <span style=\"color: #008800; font-weight: bold\">return</span> <span style=\"color: #333333\">&lt;</span>WrappedComponent data<span style=\"color: #333333\">=</span>{<span style=\"color: #008800; font-weight: bold\">this</span>.state.data} {...<span style=\"color: #008800; font-weight: bold\">this</span>.props} <span style=\"color: #333333\">/&gt;</span>;\n    }\n  };\n}\n</pre>\n</div>\n    <br>\n    We know HOC is a function that takes in a component and returns a component.\n    <br>\n    In the code above, we have created a function called HOC which returns a component and performs a functionality that can be shared across both <b>ArticlesList</b> component and <b>UsersList Component</b>.\n    <br>\n    The second parameter in the HOC function is the function that calls the method on the API endpoint.\n    <br>\n    We have reduced the duplicated code of the <b>componentDidUpdate</b> and <b>componentDidMount</b> functions.\n    <br>\n    Using the concept of Higher Order Components, we can now render the <b>ArticlesList</b> and <b>UsersList</b> component in the following way:\n    <br>\n<div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #008800; font-weight: bold\">const</span> ArticlesListWithHOC <span style=\"color: #333333\">=</span> HOC(ArticlesList, (GlobalDataSource) <span style=\"color: #333333\">=&gt;</span> GlobalDataSource.getArticles());\n<span style=\"color: #008800; font-weight: bold\">const</span> UsersListWithHOC <span style=\"color: #333333\">=</span> HOC(UsersList, (GlobalDataSource) <span style=\"color: #333333\">=&gt;</span> GlobalDataSource.getUsers());\n</pre>\n</div>\n    <br>\n    Remember, we are not trying to change the functionality of each component, we are trying to share a single functionality across multiple components using HOC. \n    <br><br>\n  </div>\n\n  <h3 id=\"react-prop-drilling\"> 16. What is prop drilling in React? </h3>\n  <div>\n    <center><img src=\"https://assets.interviewbit.com/assets/skill_interview_questions/react/prop-drilling-8c64f4d4219c5d9535272d44774fa09e494a07d2a2f2cc735ea2e73d1be56821.png.gz\" width=\"900px;\"></center>\n    Sometimes while developing React applications, there is a need to pass data from a component that is higher in the hierarchy to a component that is deeply nested. \n    <br>\n    To pass data between such components, we pass props from a source component, and keep passing the prop to the next component in the hierarchy till we reach the deeply nested component.\n    <br>\n    The disadvantage of using prop drilling is that the components that should otherwise be not aware of the data have access to the data.\n    <br><br>\n  </div>\n\n\n  <h3 id=\"react-error-boundary\"> 17. What are error boundaries? </h3>\n  <div>\n    Introduced in the version 16 of React, Error boundaries provide a way for us to catch errors that occur in the render phase. \n    <br><br>\n    <b>What is an error boundary?</b>\n    <br>\n    Any component which uses one of the following lifecycle methods, is considered an error boundary.\n    <br>\n    In what places can an error boundary detect an error?\n    <ul class=\"list-text\">\n      <li>\n        Render phase\n      </li>\n      <li>\n        Inside a lifecycle method\n      </li>\n      <li>\n        Inside the constructor\n      </li>\n    </ul>\n    <b>Without using error boundaries:</b>\n    <br>\n    <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #008800; font-weight: bold\">class</span> CounterComponent <span style=\"color: #008800; font-weight: bold\">extends</span> React.Component{\n constructor(props){\n   <span style=\"color: #008800; font-weight: bold\">super</span>(props);\n   <span style=\"color: #008800; font-weight: bold\">this</span>.<span style=\"color: #996633\">state = </span>{\n     <span style=\"color: #996633\">counterValue: </span><span style=\"color: #0000DD; font-weight: bold\">0</span>\n   }\n   <span style=\"color: #008800; font-weight: bold\">this</span>.<span style=\"color: #996633\">incrementCounter = </span><span style=\"color: #008800; font-weight: bold\">this</span>.incrementCounter.bind(<span style=\"color: #008800; font-weight: bold\">this</span>);\n }\n\n incrementCounter(){\n   <span style=\"color: #008800; font-weight: bold\">this</span>.setState(prevState <span style=\"color: #333333\">=&gt;</span> <span style=\"color: #996633\">counterValue = </span>prevState<span style=\"color: #333333\">+</span><span style=\"color: #0000DD; font-weight: bold\">1</span>);\n }\n\n render(){\n   <span style=\"color: #008800; font-weight: bold\">if</span>(<span style=\"color: #008800; font-weight: bold\">this</span>.state.counter <span style=\"color: #333333\">===</span> <span style=\"color: #0000DD; font-weight: bold\">2</span>){\n     <span style=\"color: #008800; font-weight: bold\">throw</span> <span style=\"color: #008800; font-weight: bold\">new</span> <span style=\"color: #007020\">Error</span>(<span style=\"background-color: #fff0f0\">'Crashed'</span>);\n   }\n\n   <span style=\"color: #008800; font-weight: bold\">return</span>(\n     <span style=\"color: #333333\">&lt;</span>div<span style=\"color: #333333\">&gt;</span>\n       <span style=\"color: #333333\">&lt;</span>button onClick<span style=\"color: #333333\">=</span>{<span style=\"color: #008800; font-weight: bold\">this</span>.incrementCounter}<span style=\"color: #333333\">&gt;</span>Increment Value<span style=\"color: #333333\">&lt;/</span>button<span style=\"color: #333333\">&gt;</span>\n       <span style=\"color: #333333\">&lt;</span>p<span style=\"color: #333333\">&gt;</span>Value <span style=\"color: #008800; font-weight: bold\">of</span> <span style=\"color: #996633\">counter: </span>{<span style=\"color: #008800; font-weight: bold\">this</span>.state.counterValue}<span style=\"color: #333333\">&lt;/</span>p<span style=\"color: #333333\">&gt;</span>\n     <span style=\"color: #333333\">&lt;/</span>div<span style=\"color: #333333\">&gt;</span>\n   )\n }\n}\n</pre></div>\n    <br>\n    In the code above, when the counterValue equals to 2, we throw an error inside the render method.\n    <br>\n    When we are not using the error boundary, instead of seeing an error, we see a blank page. \n    <br>\n    Since any error inside the render method, leads to unmounting of the component.\n    <br>\n    To display an error that occurs inside the render method, we use error boundaries.\n    <br><br>\n    <b>With error boundaries:</b>\n    <br>\n    As mentioned above, error boundary is a component using one or both of the following methods:\n    <br><br>\n    <b>static getDerivedStateFromError and componentDidCatch.</b>\n    <br>\n    Let’s create an error boundary to handle errors in render phase:\n    <br>\n    <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #008800; font-weight: bold\">class</span> ErrorBoundary <span style=\"color: #008800; font-weight: bold\">extends</span> React.Component {\n constructor(props) {\n   <span style=\"color: #008800; font-weight: bold\">super</span>(props);\n   <span style=\"color: #008800; font-weight: bold\">this</span>.<span style=\"color: #996633\">state = </span>{ <span style=\"color: #996633\">hasError: </span><span style=\"color: #008800; font-weight: bold\">false</span> };\n }\n\n static getDerivedStateFromError(error) {     \n   <span style=\"color: #008800; font-weight: bold\">return</span> { <span style=\"color: #996633\">hasError: </span><span style=\"color: #008800; font-weight: bold\">true</span> }; \n }\n  componentDidCatch(error, errorInfo) {       \n   logErrorToMyService(error, errorInfo); \n }\n\n render() {\n   <span style=\"color: #008800; font-weight: bold\">if</span> (<span style=\"color: #008800; font-weight: bold\">this</span>.state.hasError) {     \n     <span style=\"color: #008800; font-weight: bold\">return</span> <span style=\"color: #333333\">&lt;</span>h4<span style=\"color: #333333\">&gt;</span>Something went wrong<span style=\"color: #333333\">&lt;/</span>h4<span style=\"color: #333333\">&gt;</span>     \n   }\n   <span style=\"color: #008800; font-weight: bold\">return</span> <span style=\"color: #008800; font-weight: bold\">this</span>.props.children;\n }\n}\n</pre></div>\n    <br>\n    In the code above, <b>getDerivedStateFromError</b> function renders the fallback UI interface when the render method has an error.\n    <br>\n    <b>componentDidCatch</b> logs the error information to an error tracking service.\n    <br> \n    Now with error boundary, we can render the CounterComponent in the following way:\n    <br>\n    <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #007700\">&lt;ErrorBoundary&gt;</span>\n  <span style=\"color: #007700\">&lt;CounterComponent/&gt;</span>\n<span style=\"color: #007700\">&lt;/ErrorBoundary&gt;</span>\n</pre></div>\n    <br><br>\n  <div>\n\n\n\n</div>\n\n        </div>\n      </div>\n    </div>",
    "tags": [
      "COMPONENTS"
    ]
  },
  {
    "text": "What are Higher Order Components?",
    "source": "https://www.interviewbit.com/react-interview-questions/",
    "answer": "<div>\n    Simply put, Higher Order Component(HOC) is a function that takes in a component and returns a new component. \n    <br><br>\n    <center><img src=\"https://assets.interviewbit.com/assets/skill_interview_questions/react/component-higher-component-2bf94eac9671642e9b8419ee520cf77a4184bb29394cb897fd1e9872c9d7e2c8.png.gz\" width=\"900px;\"></center>\n    <b>When do we need a Higher Order Component?</b>\n    <br>\n    While developing React applications, we might develop components that are quite similar to each other with minute differences. \n    <br>\n    In most cases, developing similar components might not be an issue but, while developing larger applications we need to keep our code <b>DRY</b>, therefore, we want an <b>abstraction</b> that allows us to define this logic in a single place and share it across components. \n    <br>\n    HOC allows us to create that abstraction. \n    <br>\n    Example of a HOC:\n    <br>\n    Consider the following components having similar functionality\n    <br>\n    The following component displays the list of articles:\n    <br>\n<div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #888888\">// \"GlobalDataSource\" is some global data source</span>\n<span style=\"color: #008800; font-weight: bold\">class</span> ArticlesList <span style=\"color: #008800; font-weight: bold\">extends</span> React.Component {\n  constructor(props) {\n    <span style=\"color: #008800; font-weight: bold\">super</span>(props);\n    <span style=\"color: #008800; font-weight: bold\">this</span>.handleChange <span style=\"color: #333333\">=</span> <span style=\"color: #008800; font-weight: bold\">this</span>.handleChange.bind(<span style=\"color: #008800; font-weight: bold\">this</span>);\n    <span style=\"color: #008800; font-weight: bold\">this</span>.state <span style=\"color: #333333\">=</span> {\n      articles<span style=\"color: #333333\">:</span> GlobalDataSource.getArticles(),\n    };\n  }\n\n  componentDidMount() {\n    <span style=\"color: #888888\">// Listens to the changes added</span>\n    GlobalDataSource.addChangeListener(<span style=\"color: #008800; font-weight: bold\">this</span>.handleChange);\n  }\n\n  componentWillUnmount() {\n    <span style=\"color: #888888\">// Listens to the changes removed</span>\n    GlobalDataSource.removeChangeListener(<span style=\"color: #008800; font-weight: bold\">this</span>.handleChange);\n  }\n\n  handleChange() {\n    <span style=\"color: #888888\">// States gets Update whenver data source changes</span>\n    <span style=\"color: #008800; font-weight: bold\">this</span>.setState({\n      articles<span style=\"color: #333333\">:</span> GlobalDataSource.getArticles(),\n    });\n  }\n\n  render() {\n    <span style=\"color: #008800; font-weight: bold\">return</span> (\n      <span style=\"color: #333333\">&lt;</span>div<span style=\"color: #333333\">&gt;</span>\n        {<span style=\"color: #008800; font-weight: bold\">this</span>.state.articles.map((article) <span style=\"color: #333333\">=&gt;</span> (\n          <span style=\"color: #333333\">&lt;</span>ArticleData article<span style=\"color: #333333\">=</span>{article} key<span style=\"color: #333333\">=</span>{article.id} <span style=\"color: #333333\">/&gt;</span>\n        ))}\n      <span style=\"color: #333333\">&lt;</span>/div<span style=\"color: #333333\">&gt;</span>\n    );\n  }\n}\n</pre>\n</div>\n    <br>\n    The following component displays the list of users:\n    <br>\n<div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #888888\">// \"GlobalDataSource\" is some global data source</span>\n<span style=\"color: #008800; font-weight: bold\">class</span> UsersList <span style=\"color: #008800; font-weight: bold\">extends</span> React.Component {\n  constructor(props) {\n    <span style=\"color: #008800; font-weight: bold\">super</span>(props);\n    <span style=\"color: #008800; font-weight: bold\">this</span>.handleChange <span style=\"color: #333333\">=</span> <span style=\"color: #008800; font-weight: bold\">this</span>.handleChange.bind(<span style=\"color: #008800; font-weight: bold\">this</span>);\n    <span style=\"color: #008800; font-weight: bold\">this</span>.state <span style=\"color: #333333\">=</span> {\n      users<span style=\"color: #333333\">:</span> GlobalDataSource.getUsers(),\n    };\n  }\n\n  componentDidMount() {\n    <span style=\"color: #888888\">// Listens to the changes added</span>\n    GlobalDataSource.addChangeListener(<span style=\"color: #008800; font-weight: bold\">this</span>.handleChange);\n  }\n\n  componentWillUnmount() {\n    <span style=\"color: #888888\">// Listens to the changes removed</span>\n    GlobalDataSource.removeChangeListener(<span style=\"color: #008800; font-weight: bold\">this</span>.handleChange);\n  }\n\n  handleChange() {\n    <span style=\"color: #888888\">// States gets Update whenver data source changes</span>\n    <span style=\"color: #008800; font-weight: bold\">this</span>.setState({\n      users<span style=\"color: #333333\">:</span> GlobalDataSource.getUsers(),\n    });\n  }\n\n  render() {\n    <span style=\"color: #008800; font-weight: bold\">return</span> (\n      <span style=\"color: #333333\">&lt;</span>div<span style=\"color: #333333\">&gt;</span>\n        {<span style=\"color: #008800; font-weight: bold\">this</span>.state.users.map((user) <span style=\"color: #333333\">=&gt;</span> (\n          <span style=\"color: #333333\">&lt;</span>UserData user<span style=\"color: #333333\">=</span>{user} key<span style=\"color: #333333\">=</span>{user.id} <span style=\"color: #333333\">/&gt;</span>\n        ))}\n      <span style=\"color: #333333\">&lt;/</span>div<span style=\"color: #333333\">&gt;</span>\n    );\n  }\n}\n</pre></div>\n    <br>\n    Notice the above components, both have similar functionality but, they are calling different methods to an API endpoint. \n    <br>\n    Let’s create a Higher Order Component to create an abstraction:\n    <br>\n<div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #888888\">// Higher Order Component which takes a component</span>\n<span style=\"color: #888888\">// as input and returns another component</span>\n<span style=\"color: #888888\">// \"GlobalDataSource\" is some global data source</span>\n<span style=\"color: #008800; font-weight: bold\">function</span> HOC(WrappedComponent, selectData) {\n  <span style=\"color: #008800; font-weight: bold\">return</span> <span style=\"color: #008800; font-weight: bold\">class</span> <span style=\"color: #008800; font-weight: bold\">extends</span> React.Component {\n    constructor(props) {\n      <span style=\"color: #008800; font-weight: bold\">super</span>(props);\n      <span style=\"color: #008800; font-weight: bold\">this</span>.handleChange <span style=\"color: #333333\">=</span> <span style=\"color: #008800; font-weight: bold\">this</span>.handleChange.bind(<span style=\"color: #008800; font-weight: bold\">this</span>);\n      <span style=\"color: #008800; font-weight: bold\">this</span>.state <span style=\"color: #333333\">=</span> {\n        data<span style=\"color: #333333\">:</span> selectData(GlobalDataSource, props),\n      };\n    }\n\n    componentDidMount() {\n      <span style=\"color: #888888\">// Listens to the changes added</span>\n      GlobalDataSource.addChangeListener(<span style=\"color: #008800; font-weight: bold\">this</span>.handleChange);\n    }\n\n    componentWillUnmount() {\n      <span style=\"color: #888888\">// Listens to the changes removed</span>\n      GlobalDataSource.removeChangeListener(<span style=\"color: #008800; font-weight: bold\">this</span>.handleChange);\n    }\n\n    handleChange() {\n      <span style=\"color: #008800; font-weight: bold\">this</span>.setState({\n        data<span style=\"color: #333333\">:</span> selectData(GlobalDataSource, <span style=\"color: #008800; font-weight: bold\">this</span>.props),\n      });\n    }\n\n    render() {\n      <span style=\"color: #888888\">// Rendering the wrapped component with the latest data data</span>\n      <span style=\"color: #008800; font-weight: bold\">return</span> <span style=\"color: #333333\">&lt;</span>WrappedComponent data<span style=\"color: #333333\">=</span>{<span style=\"color: #008800; font-weight: bold\">this</span>.state.data} {...<span style=\"color: #008800; font-weight: bold\">this</span>.props} <span style=\"color: #333333\">/&gt;</span>;\n    }\n  };\n}\n</pre>\n</div>\n    <br>\n    We know HOC is a function that takes in a component and returns a component.\n    <br>\n    In the code above, we have created a function called HOC which returns a component and performs a functionality that can be shared across both <b>ArticlesList</b> component and <b>UsersList Component</b>.\n    <br>\n    The second parameter in the HOC function is the function that calls the method on the API endpoint.\n    <br>\n    We have reduced the duplicated code of the <b>componentDidUpdate</b> and <b>componentDidMount</b> functions.\n    <br>\n    Using the concept of Higher Order Components, we can now render the <b>ArticlesList</b> and <b>UsersList</b> component in the following way:\n    <br>\n<div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #008800; font-weight: bold\">const</span> ArticlesListWithHOC <span style=\"color: #333333\">=</span> HOC(ArticlesList, (GlobalDataSource) <span style=\"color: #333333\">=&gt;</span> GlobalDataSource.getArticles());\n<span style=\"color: #008800; font-weight: bold\">const</span> UsersListWithHOC <span style=\"color: #333333\">=</span> HOC(UsersList, (GlobalDataSource) <span style=\"color: #333333\">=&gt;</span> GlobalDataSource.getUsers());\n</pre>\n</div>\n    <br>\n    Remember, we are not trying to change the functionality of each component, we are trying to share a single functionality across multiple components using HOC. \n    <br><br>\n  </div>",
    "tags": [
      "COMPONENTS", "HOC"
    ]
  },
  {
    "text": "What is prop drilling in React?",
    "source": "https://www.interviewbit.com/react-interview-questions/",
    "answer": "<div>\n    <center><img src=\"https://assets.interviewbit.com/assets/skill_interview_questions/react/prop-drilling-8c64f4d4219c5d9535272d44774fa09e494a07d2a2f2cc735ea2e73d1be56821.png.gz\" width=\"900px;\"></center>\n    Sometimes while developing React applications, there is a need to pass data from a component that is higher in the hierarchy to a component that is deeply nested. \n    <br>\n    To pass data between such components, we pass props from a source component, and keep passing the prop to the next component in the hierarchy till we reach the deeply nested component.\n    <br>\n    The disadvantage of using prop drilling is that the components that should otherwise be not aware of the data have access to the data.\n    <br><br>\n  </div>",
    "tags": [
      "PROPS", "DRILLING"
    ]
  },
  {
    "text": "What are error boundaries?",
    "source": "https://www.interviewbit.com/react-interview-questions/",
    "answer": "<div>\n    Introduced in the version 16 of React, Error boundaries provide a way for us to catch errors that occur in the render phase. \n    <br><br>\n    <b>What is an error boundary?</b>\n    <br>\n    Any component which uses one of the following lifecycle methods, is considered an error boundary.\n    <br>\n    In what places can an error boundary detect an error?\n    <ul class=\"list-text\">\n      <li>\n        Render phase\n      </li>\n      <li>\n        Inside a lifecycle method\n      </li>\n      <li>\n        Inside the constructor\n      </li>\n    </ul>\n    <b>Without using error boundaries:</b>\n    <br>\n    <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #008800; font-weight: bold\">class</span> CounterComponent <span style=\"color: #008800; font-weight: bold\">extends</span> React.Component{\n constructor(props){\n   <span style=\"color: #008800; font-weight: bold\">super</span>(props);\n   <span style=\"color: #008800; font-weight: bold\">this</span>.<span style=\"color: #996633\">state = </span>{\n     <span style=\"color: #996633\">counterValue: </span><span style=\"color: #0000DD; font-weight: bold\">0</span>\n   }\n   <span style=\"color: #008800; font-weight: bold\">this</span>.<span style=\"color: #996633\">incrementCounter = </span><span style=\"color: #008800; font-weight: bold\">this</span>.incrementCounter.bind(<span style=\"color: #008800; font-weight: bold\">this</span>);\n }\n\n incrementCounter(){\n   <span style=\"color: #008800; font-weight: bold\">this</span>.setState(prevState <span style=\"color: #333333\">=&gt;</span> <span style=\"color: #996633\">counterValue = </span>prevState<span style=\"color: #333333\">+</span><span style=\"color: #0000DD; font-weight: bold\">1</span>);\n }\n\n render(){\n   <span style=\"color: #008800; font-weight: bold\">if</span>(<span style=\"color: #008800; font-weight: bold\">this</span>.state.counter <span style=\"color: #333333\">===</span> <span style=\"color: #0000DD; font-weight: bold\">2</span>){\n     <span style=\"color: #008800; font-weight: bold\">throw</span> <span style=\"color: #008800; font-weight: bold\">new</span> <span style=\"color: #007020\">Error</span>(<span style=\"background-color: #fff0f0\">'Crashed'</span>);\n   }\n\n   <span style=\"color: #008800; font-weight: bold\">return</span>(\n     <span style=\"color: #333333\">&lt;</span>div<span style=\"color: #333333\">&gt;</span>\n       <span style=\"color: #333333\">&lt;</span>button onClick<span style=\"color: #333333\">=</span>{<span style=\"color: #008800; font-weight: bold\">this</span>.incrementCounter}<span style=\"color: #333333\">&gt;</span>Increment Value<span style=\"color: #333333\">&lt;/</span>button<span style=\"color: #333333\">&gt;</span>\n       <span style=\"color: #333333\">&lt;</span>p<span style=\"color: #333333\">&gt;</span>Value <span style=\"color: #008800; font-weight: bold\">of</span> <span style=\"color: #996633\">counter: </span>{<span style=\"color: #008800; font-weight: bold\">this</span>.state.counterValue}<span style=\"color: #333333\">&lt;/</span>p<span style=\"color: #333333\">&gt;</span>\n     <span style=\"color: #333333\">&lt;/</span>div<span style=\"color: #333333\">&gt;</span>\n   )\n }\n}\n</pre></div>\n    <br>\n    In the code above, when the counterValue equals to 2, we throw an error inside the render method.\n    <br>\n    When we are not using the error boundary, instead of seeing an error, we see a blank page. \n    <br>\n    Since any error inside the render method, leads to unmounting of the component.\n    <br>\n    To display an error that occurs inside the render method, we use error boundaries.\n    <br><br>\n    <b>With error boundaries:</b>\n    <br>\n    As mentioned above, error boundary is a component using one or both of the following methods:\n    <br><br>\n    <b>static getDerivedStateFromError and componentDidCatch.</b>\n    <br>\n    Let’s create an error boundary to handle errors in render phase:\n    <br>\n    <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #008800; font-weight: bold\">class</span> ErrorBoundary <span style=\"color: #008800; font-weight: bold\">extends</span> React.Component {\n constructor(props) {\n   <span style=\"color: #008800; font-weight: bold\">super</span>(props);\n   <span style=\"color: #008800; font-weight: bold\">this</span>.<span style=\"color: #996633\">state = </span>{ <span style=\"color: #996633\">hasError: </span><span style=\"color: #008800; font-weight: bold\">false</span> };\n }\n\n static getDerivedStateFromError(error) {     \n   <span style=\"color: #008800; font-weight: bold\">return</span> { <span style=\"color: #996633\">hasError: </span><span style=\"color: #008800; font-weight: bold\">true</span> }; \n }\n  componentDidCatch(error, errorInfo) {       \n   logErrorToMyService(error, errorInfo); \n }\n\n render() {\n   <span style=\"color: #008800; font-weight: bold\">if</span> (<span style=\"color: #008800; font-weight: bold\">this</span>.state.hasError) {     \n     <span style=\"color: #008800; font-weight: bold\">return</span> <span style=\"color: #333333\">&lt;</span>h4<span style=\"color: #333333\">&gt;</span>Something went wrong<span style=\"color: #333333\">&lt;/</span>h4<span style=\"color: #333333\">&gt;</span>     \n   }\n   <span style=\"color: #008800; font-weight: bold\">return</span> <span style=\"color: #008800; font-weight: bold\">this</span>.props.children;\n }\n}\n</pre></div>\n    <br>\n    In the code above, <b>getDerivedStateFromError</b> function renders the fallback UI interface when the render method has an error.\n    <br>\n    <b>componentDidCatch</b> logs the error information to an error tracking service.\n    <br> \n    Now with error boundary, we can render the CounterComponent in the following way:\n    <br>\n    <div style=\"background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #007700\">&lt;ErrorBoundary&gt;</span>\n  <span style=\"color: #007700\">&lt;CounterComponent/&gt;</span>\n<span style=\"color: #007700\">&lt;/ErrorBoundary&gt;</span>\n</pre></div>\n    <br><br>\n  <div>\n\n\n\n</div>\n\n        </div>",
    "tags": [
      "ERRORS"
    ]
  }
]
